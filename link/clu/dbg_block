%% Copyright Massachusetts Institute of Technology 1984, 1989

#extend

dbg_block = cluster is
	create,
	equal,
	set_rtn_info,
	size,
	output,
	is_overloaded,
	chain_overloaded_block,
	chain_blocks,
	prepare_to_dump,
	print,
	_gcd

    rep = variant[
	      New:    n_rep,
	      Old:    o_rep
		  ]

    n_rep = record[
	      RT:	      r_template,
	      RI:	      rtn_inst,
	      Rtn_Info:       constant
		 ]

    o_rep = address		%% Address of old dbg_block

    vJSR_Instr   = 0047271	%% JSR Abs.L
    vJMP_Instr   = 0047371	%% JMP Abs.L

    vJSR_DBG_Size = 6		%% Size of initial JSR to debug routine
    vDbg_Block_Size  = 28

    %% Dbg Block is:
    %%	JSR Debug_Rtn		6 bytes  [0]
    %%	Local count		2 bytes  [6] (includes RR and PP)
    %%	Addr of _rtn_info	4 bytes  [8]
    %%	Addr of cluster owns	4 bytes [12] (0 if none)
    %%	Addr of routine owns	4 bytes [16] (0 if none)
    %%	Addr of param list	4 bytes [20] (0 if none) for PP
    %%	Addr of routine code	4 bytes [24]


    Create = proc (R: r_template,
		   RI: rtn_inst
		   ) returns (cvt)
	own No_Rtn_Info: constant := constant$Make_Null()
	return (rep$Make_New(n_rep${ RT:	    R,
				     RI:            RI,
				     Rtn_Info:      No_Rtn_Info }))
	end Create

    Equal = proc (DB1: cvt, DB2: cvt) returns (bool)
	return (rep$Similar1(DB1, DB2))
	end Equal

    Set_Rtn_Info = proc (DB: cvt, RInf: constant)
	tagcase DB
	   tag New (NDB: n_rep):
	       NDB.Rtn_Info := RInf
	   tag Old:
	   end
	end Set_Rtn_Info

    Size = proc (DB: cvt) returns (int)
	tagcase DB
	   tag New (NDB: n_rep):
	       if (rtn_inst$Is_Overloaded(NDB.RI))
		  then return (0)	%% Will not be output.
		  end
	   tag Old:
	   end
	return (vDbg_Block_Size)
	end Size


    Output = proc (DB: cvt, Env: lnk_env)
	tagcase DB
	   tag New (NDB: n_rep):
	       if (rtn_inst$Is_Overloaded(NDB.RI))
		  then %% Will be overwritten in place by Chain_Overloaded_Block
		       return
		  end
	       Out: out_link_chan := Env.Output
	       out_link_chan$Write_Word(Out, vJSR_Instr)
	       AH, AL: int := address$A_to_Ints(Env.Debug_Routine_Addr,
						Env.Locates)
	       out_link_chan$Write_Word_Pair(Out, AH, AL)
	       Output_Info(NDB.RT, NDB.RI, NDB.Rtn_Info, Out, Env)
	   tag Old:
	   end
	end Output

    Output_Info = proc (RT: r_template, RI: rtn_inst, Rtn_Info: constant,
			Out: out_link_chan, Env: lnk_env)
	Locs: locates := Env.Locates
	out_link_chan$Write_Word(Out, Local_Count(RT))
	if (constant$Is_Address(Rtn_Info))
	   then AH, AL: int := address$A_to_Ints(Rtn_Info.Address,
						 Locs)
		out_link_chan$Write_Word_Pair(Out, AH, AL)
	   else out_link_chan$Write_Long_Word(Out, 0)
		stream$PutL(Env.Options.List_Stream,
			    "Invalid rtn_info in debug block for " ||
			    rtn_inst$Unparse(RI))
	   end
	if (r_template$Is_Clust_Rtn(RT))
	   then C_Owns_Addr: address := RI.Cluster_Inst.Owns_Address
		if (address$Is_Null(C_Owns_Addr))
		   then out_link_chan$Write_Long_Word(Out, 0)
		   else AH, AL: int := address$A_to_Ints(C_Owns_Addr,
							 Locs)
			out_link_chan$Write_Word_Pair(Out, AH, AL)
		   end
	   else out_link_chan$Write_Long_Word(Out, 0)
	   end
	R_Owns_Addr: address := RI.Owns_Address
	if (address$Is_Null(R_Owns_Addr))
	   then out_link_chan$Write_Long_Word(Out, 0)
	   else AH, AL: int := address$A_to_Ints(R_Owns_Addr, Locs)
		out_link_chan$Write_Word_Pair(Out, AH, AL)
	   end
	if (r_template$Is_Parameterized(RT))
	   then AH, AL: int := address$A_to_Ints(RI.Uses_Address, Locs)
		out_link_chan$Write_Word_Pair(Out, AH, AL)
	   else out_link_chan$Write_Long_Word(Out, 0)
	   end
	out_link_chan$Write_Long_Word(Out,
				      address$A_to_Int(RT.Code_Address, Locs))
	end Output_Info

    Local_Count = proc (RT: r_template) returns (int);
	Count: int := RT.Locals_Count
	if (r_template$Is_Parameterized(RT))
	   then Count := Count + 1		%% For PP
	   end
	if (RT.Arg_Count > 0)
	   then Count := Count + 1		%% For RR
	   end
	return (Count)
	end Local_Count;


    Is_Overloaded = proc (DB: cvt) returns (bool)
	return (rtn_inst$Is_Overloaded(
		    rep$Value_New(
			DB).RI))
	   except when Wrong_Tag:
		       return (true)
		  end
	end Is_Overloaded

    Chain_Overloaded_Block = proc (Old_DB: cvt, New_DB: cvt, Env: lnk_env)
	ODB_addr: o_rep := rep$Value_Old(Old_DB)
	NDB: n_rep := rep$Value_New(New_DB)
	   except when Wrong_Tag:
		       %% New_DB has already been chained to.
		       return
		  end
	Rtn_Inf: constant
	if (~ rtn_inst$Is_Overloaded(NDB.RI))
	   then return		%% Hmmm.  Really should have been overloaded.
	   end
	Out: out_link_chan := Env.Output

	Pos_Addr: address := address$Advance(ODB_Addr,
					     vJSR_Dbg_Size)
	out_link_chan$Position(Out, Pos_Addr)	%% Skip initial jsb.
	Output_Info(NDB.RT, NDB.RI, NDB.Rtn_Info,
		    Out, Env)
	end Chain_Overloaded_Block

    Chain_Blocks = proc (Old_DB: cvt, New_Addr: address, Env: lnk_env)
	%% Put in JMP to new dbg_block and clear out other info.
	ODB_Addr: o_rep := rep$Value_Old(Old_DB)
	Out: out_link_chan := Env.Output
	out_link_chan$Position(Out, ODB_Addr)
	out_link_chan$Write_Word(Out, vJMP_Instr)
	NAH, NAL: int := address$A_to_Ints(New_Addr, Env.Locates)
	out_link_chan$Write_Word_Pair(Out, NAH, NAL)
	out_link_chan$Write_Word(Out, 0)		%% Clear local count
	out_link_chan$Write_Long_Word(Out, 0)		%% Clear _rtn_info
	out_link_chan$Write_Long_Word(Out, 0)		%% Clear cluster own addr
	out_link_chan$Write_Long_Word(Out, 0)		%% Clear rtn own addr
	out_link_chan$Write_Long_Word(Out, 0)		%% Clear param list addr
	out_link_chan$Write_Long_Word(Out, 0)		%% Clear code addr
	end Chain_Blocks

    Prepare_to_Dump = proc (DB: cvt)
	tagcase DB
	   tag New (NDB: n_rep):
	       rep$Change_Old(DB,
			      NDB.RI.Entry_Address)
	   tag Old:
	   end
	end Prepare_to_Dump

    Print = proc (DB: cvt, S: pstream)
	rep$Print(DB, S)
	end Print

    _gcd = proc (DB: cvt, Tab: gcd_tab) returns (int)
	return (rep$_gcd(DB, Tab))
	end _gcd

    end dbg_block
