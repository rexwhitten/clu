%	PDEFN1	CLU
% Copyright Massachusetts Institute of Technology 1980, 1989
%	MC68000 Assembler:  parsing routines for definitions

% In the comments, <> is used for the cursor position

% definition => equatelist | applydefn | typedefn

p_definition = proc (e: p_env) returns (definition) signals (eof)
	not_oper = false
	e.clustr := ""
	e.applystr := ""
	if ~p_find_a_defn(e, not_oper)
	   then signal eof end
	def: definition
	tagcase p_env$peek(e, 3)
	   tag defnkey (k: defnkey):
		tagcase k
		   tag oper_ (kind: int):
			return(definition$make_apply(p_applydefn(e, kind)))
		   tag cluster_ (select: bool):
			return(definition$make_cluster_(p_typedefn(e, select)))
		   end
	   others:
		return(definition$make_equates(p_slist[equate](e, p_equate)))
	   end
	end p_definition

% applydefn => procedure | iterator
% procedure => name = proc_key parms args returns signals where rbody END name
% iterator => name = ITER parms args yields signals where rbody END name
% proc_key => PROC | QPROC | SELPROC | QSELPROC
% rbody => equatelist wveclist ownslist varslist stmtlist

p_applydefn = proc (e: p_env, kind: int) returns (applydefn)
	nm: name := p_name(e)
	e.applystr := nm
	line: int := e.line
	p_env$next_token(e)
	p_env$next_token(e)
	e.operkind := kind
	parms: decllist := p_blist[decl](e, p_decl, _none_ok, "parameter")
	args: decllist := p_plist[decl](e, p_decl, _no_none, _empty_ok,
								"argument")
	vals: typelist := p_values(e, p_env$in_proc(e))
	sigs: exceptionlist := p_signals(e)
	p_where(e)
	p_env$begin_body(e, _misc_body)
	eqs: equatelist := p_slist[equate](e, p_equate)
	wvecs: wveclist := p_wveclist(e)
	owns: varlist := p_ownslist(e)
	vars: varlist := p_varslist(e)
	bod: stmtlist := p_slist[stmt](e, p_stmt)
	p_env$end_body(e)
	p_defn_end(e, nm)
	return(applydefn${name:    nm,
			  kind:    kind,
			  parms:   parms,
			  args:    args,
			  vals:    vals,
			  sigs:    sigs,
			  equates: eqs,
			  wvecs:   wvecs,
			  owns:    owns,
			  vars:    vars,
			  labels:  p_env$pop_labels(e),
			  body:    bod,
			  line:    line})
	end p_applydefn

% typedefn => name = cluster_key parms IS namelist where cluster_body END name
% cluster_key => CLUSTER | SELECTOR
% cluster_body => equatelist wveclist ownslist applydefnlist

p_typedefn = proc (e: p_env, select: bool) returns (typedefn)
	nm: name := p_name(e)
	e.clustr := nm
	line: int := e.line
	p_env$next_token(e)
	p_env$next_token(e)
	parms: decllist := p_blist[decl](e, p_decl, _none_ok, "parameter")
	ops: namelist
	tagcase e.peek1
	   tag is_: p_env$next_token(e)
		    ops := p_order[name](e, p_name1, name$copy, "name")
	   others:  p_env$assume(e, "IS name_list in module header")
		    ops := namelist$new()
	   end
	p_where(e)
	equates: equatelist := p_slist[equate](e, p_equate)
	wvecs: wveclist := p_wveclist(e)
	owns: varlist := p_ownslist(e)
	bod: applydefnlist := p_list[applydefn](e, p_operdefn, _no_empty,
								"operation")
	p_defn_end(e, nm)
	return(typedefn${name:    nm,
			 select:  select,
			 parms:   parms,
			 ops:     ops,
			 equates: equates,
			 wvecs:   wvecs,
			 owns:    owns,
			 body:    bod,
			 line:    line})
	end p_typedefn

% equate => idn = expr

p_equate = proc (e: p_env) returns (equate) signals (none, bad)
	id: idn
	tagcase e.peek1
	   tag idn (k: idn):
		id := k
	   others:
		signal none
	   end
	tagcase p_env$peek(e, 2)
	   tag equal:
	   others:    signal none
	   end
	k: token := p_env$peek(e, 3)
	tagcase k
	   tag defnkey: signal none		% Don't gobble a module!
	   others:      
	   end
	p_env$next_token(e)
	line: int := e.line
	p_env$next_token(e)
	val: expr := p_expr1(e, "right side of equate")
	return(equate${idn:  id,
		       expr: val,
		       line: line})
	end p_equate

% wvecdef => WVEC idnlist { expr }

p_wveclist = proc (e: p_env) returns (wveclist)
	wvecs: wveclist := wveclist$new()
	while true do
		tagcase e.peek1
		   tag stmtkey (k: stmtkey):
			tagcase k
			   tag wvec_:
				p_env$next_token(e)
				line: int := e.line
				ids: idnlist := p_clist[idn](e, p_idn, "idn")
				z: expr
				tagcase e.peek1
				   tag l_curly:
					p_env$next_token(e)
					z := p_expr1(e, "size expression")
					tagcase e.peek1
					   tag r_curly:
						p_env$next_token(e)
					   others:
						p_env$err(e, "} after size expression")
					   end
				   others:
					p_env$err(e, "{size expression}")
					z := e.bad_expr
				   end
				def: wvecdef := wvecdef${idns: ids,
							 size: z,
							 line: line}
				wvecs := wveclist$addh(wvecs, def)
				continue
			   others:
				break
			   end
		   others:
			break
		   end
		end
	return(wvecs)
	end p_wveclist

% owns => OWN idnlist

p_ownslist = proc (e: p_env) returns (varlist)
	owns: varlist := varlist$new()
	while true do
		tagcase e.peek1
		   tag stmtkey (k: stmtkey):
			tagcase k
			   tag own_:
				p_env$next_token(e)
				line: int := e.line
				idns: idnlist := p_clist[idn](e, p_idn, "idn")
				owns := varlist$addh(owns, vardecl${idns: idns,
								    line: line})
				continue
			   others:
				break
			   end
		   others:
			break
		   end
		end
	return(owns)
	end p_ownslist

% vars => VAR idnlist

p_varslist = proc (e: p_env) returns (varlist)
	vars: varlist := varlist$new()
	while true do
		tagcase e.peek1
		   tag stmtkey (k: stmtkey):
			tagcase k
			   tag var_:
				p_env$next_token(e)
				line: int := e.line
				idns: idnlist := p_clist[idn](e, p_idn, "idn")
				vars := varlist$addh(vars, vardecl${idns: idns,
								    line: line})
				continue
			   others:
				break
			   end
		   others:
			break
		   end
		end
	return(vars)
	end p_varslist

p_operdefn = proc (e: p_env) returns (applydefn) signals (none, bad)
	want_oper = true
	while p_find_a_defn(e, want_oper) do
		tagcase p_env$peek(e, 3)
		   tag defnkey (k: defnkey):
			tagcase k
			   tag oper_ (kind: int):
				return(p_applydefn(e, kind))
			   others:
				signal none
			   end
		   others:
			p_env$err(e, "equates legal only at start of cluster")
			p_slist[equate](e, p_equate)
		   end
		end
	signal none
	end p_operdefn

% parms => empty | [decllist]

% args => () | (decllist)

% decllist => decl | decl , decllist

% decl => idnlist : type

p_decl = proc (e: p_env) returns (decl) signals (none, bad)
	idns: idnlist := p_clist[idn](e, p_idn, "idn")
	t: typespec
	tagcase e.peek1
	   tag colon:
		p_env$next_token(e)
		t := p_type1(e)
	   others:
		p_env$assume(e, ": type in declaration")
		t := e.unknown_type
	   end
	return(decl${idns:  idns,
		     type_: t})
	end p_decl
