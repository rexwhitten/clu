%	PSTMT1	CLU
% Copyright Massachusetts Institute of Technology 1980, 1989
%	MC68000 Assembler:  parsing routines for statements

% stmtlist => empty | stmt except stmtlist

% stmt => stack | unstack | assn | massn | invoke | loop | for | if |
%	  return | yield | signal | BREAK | CONTINUE |
%	  BEGIN stmtlist END | labelstmt | instform

p_stmt = proc (e: p_env) returns (stmt) signals (none, bad)
	abs: stmtabs
	l: int := e.peekline
	tagcase e.peek1
	   tag stmtkey (k: stmtkey):
		p_env$next_token(e)
		tagcase k
		   tag stack_:
			abs := stmtabs$make_stack(
					p_clist[expr](e, p_expr, "expression"))
		   tag unstack_:
			abs := stmtabs$make_unstack(
					p_clist[idn](e, p_idn, "idn"))
		   tag loop_ (quick: bool):
			abs := p_loop(e, quick)
		   tag for_ (quick: bool):
			abs := p_for(e, quick)
		   tag if_ (kind: int):
			abs := p_if(e, kind)
		   tag return_:
			abs := stmtabs$make_return_(
					p_plist[expr](e, p_expr, _none_ok,
						_no_empty, "expression"))
		   tag yield_:
			abs := stmtabs$make_yield_(
					p_plist[expr](e, p_expr, _none_ok,
						_no_empty, "expression"))
		   tag signal_:
			abs := stmtabs$make_signal_(p_condition(e))
		   tag break_:
			abs := stmtabs$make_break_(nil)
		   tag continue_:
			abs := stmtabs$make_continue_(nil)
		   tag begin_:
			abs := stmtabs$make_body(p_body(e, _misc_body))
			p_end(e, "END of BEGIN...END statement")
		   tag wvec_:
			abs := p_wvecstmt(e)
		   tag own_:
			abs := p_ownstmt(e)
		   tag var_:
			abs := p_varstmt(e)
		   tag opcode (cd: opcodeform):
			abs := p_inst(e, cd)
		   end
	   tag idn (k: idn):
		tagcase p_env$peek(e, 2)
		   tag colon:
			p_env$next_token(e)
			p_env$next_token(e)
			p_env$add_label(e, k)
			abs := p_label(e, k)
		   tag comma:
			abs := p_massn(e)
		   tag assn:
			p_env$next_token(e)
			abs := p_assn(e, k)
		   tag equal:
			tagcase p_env$peek(e, 3)
			   tag defnkey:
				signal none
			   others:
				p_env$next_token(e)
				abs := p_assn(e, k)
			   end
		   others:
			abs := p_minvoke(e)
		   end
	   tag type_:
		abs := p_minvoke(e)
	   others:
		if p_find_a_stmt(e)
		   then abs := stmtabs$make_bad(nil)
		   else signal none
		   end
	   end except when bad: abs := stmtabs$make_bad(nil) end
	return(p_except(e, stmt$create(abs, l)))
	end p_stmt

% if => if_key <> ifarmlist END | if_key <> ifarmlist ELSE body END
% ifarmlist => ifarm | ifarm elf_key ifarmlist
% ifarm => body THEN body
% if_key => IF | IFF | IFT | ...
% elf_key => ELF | ELFF | ELFT | ...

p_if = proc (e: p_env, kind: int) returns (stmtabs)
	arms: ifarmlist := ifarmlist$new()
	else_: mbody := mbody$make_none(nil)
	while true do
		line: int := e.peekline
		test: stmtlist := p_body(e, _if_body)
		tagcase e.peek1
		   tag then_: p_env$next_token(e)
		   others:    p_env$assume(e, "THEN in IF statement")
		   end
		bod: stmtlist := p_body(e, _then_body)
		arms := ifarmlist$addh(arms, ifarm${kind: kind,
						    test: test,
						    body: bod})
		tagcase e.peek1
		   tag elf_ (nkind: int):
			p_env$next_token(e)
			kind := nkind
			continue
		   tag else_:
			p_env$next_token(e)
			else_ := mbody$make_body(p_body(e, _else_body))
		   others:
		   end
		p_end(e, "END of IF(F/T/...) statement")
		return(stmtabs$make_if_(ifstmt${arms:  arms,
						else_: else_}))
		end
	end p_if

% loop => LOOP <> body END | QLOOP <> body END

p_loop = proc (e: p_env, quick: bool) returns (stmtabs)
	bod: stmtlist := p_body(e, _loop_body)
	p_end(e, "END of (Q)LOOP...END statement")
	return(stmtabs$make_loop(loopstmt${quick: quick,
					   body:  bod}))
	end p_loop

% for => for_key <> idnlist IN invoke do
% for_key => FOR | QFOR

p_for = proc (e: p_env, quick: bool) returns (stmtabs)
	vars: idnlist
	tagcase e.peek1
	   tag in_:  vars := idnlist$new()
	   others:   vars := p_clist[idn](e, p_idn, "idn")
	   end
	tagcase e.peek1
	   tag in_:  p_env$next_token(e)
	   tag assn: p_env$err(e, "use of := instead of IN")
		     p_env$next_token(e)
	   others:   p_env$assume(e, "IN in FOR statement")
	   end
	call: invoke := p_invoke(e)
	tagcase e.peek1
	   tag do_: p_env$next_token(e)
	   others:  p_env$assume(e, "DO of DO...END clause")
	   end
	bod: stmtlist := p_body(e, _for_body)
	p_end(e, "END of DO...END clause")
	return(stmtabs$make_for_(forstmt${quick: quick,
					  vars:  vars,
					  call:  call,
					  body:  bod}))
	end p_for

% idnlist => idn | idn , idnlist

p_idn = proc (e: p_env) returns (idn) signals (none, bad)
	tagcase e.peek1
	   tag idn (k: idn):
		p_env$next_token(e)
		return(k)
	   others:
		signal none
	   end
	end p_idn

% labelstmt => idn : <> stmt

p_label = proc (e: p_env, id: idn) returns (stmtabs)
	st: stmt := p_stmt(e)
	    except when none, bad:
			st := stmt$create(stmtabs$make_bad(nil), e.peekline)
		   end
	return(stmtabs$make_label(labelstmt${idn:  id,
					     stmt: st}))
	end p_label

% assn => idn <> := expr

p_assn = proc (e: p_env, var: idn) returns (stmtabs)
	tagcase e.peek1
	   tag assn:
		p_env$next_token(e)
	   tag equal:
		p_env$err(e, "use of = instead of :=")
		p_env$next_token(e)
	   others:
	   end
	val: expr := p_expr1(e, "right side of assignment")
	tagcase e.peek1
	   tag l_paren:
		args: exprlist := p_plist[expr](e, p_expr, _no_none, _empty_ok,
								"expression")
		call: invoke := invoke${apply: val,
					args:  args}
		return(stmtabs$make_massn(massnstmt${vars: idnlist$[var],
						     call: call}))
	   others:
		return(stmtabs$make_assn(assnstmt${var:  var,
						   expr: val}))
	   end
	end p_assn

% massn => idnlist := invoke

p_massn = proc (e: p_env) returns (stmtabs)
	vars: idnlist := p_clist[idn](e, p_idn, "idn")
	call: invoke
	tagcase e.peek1
	   tag assn:
		p_env$next_token(e)
		call := p_invoke(e)
	   tag equal:
		p_env$err(e, "use of = instead of :=")
		p_env$next_token(e)
		call := p_invoke(e)
	   others:
		p_env$err(e, "missing := invocation after variables")
		call := invoke${apply:  e.bad_expr,
				args:   exprlist$new()}
	   end
	return(stmtabs$make_massn(massnstmt${vars: vars,
					     call: call}))
	end p_massn
