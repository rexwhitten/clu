%	GEXPR CLU
% Copyright Massachusetts Institute of Technology 1980, 1989
%	MC68000 Assembler: expression generator

# extend

e_const = proc (e: g_env, x: expr, wanttype: bool) returns (expr)
	_max_int = 32767
	_min_int = -_max_int - 1
	why: str
	tagcase x.abs
	   tag idn (id: idn):
		tagcase id.kind
		   tag rparm, cparm:
			if wanttype
			   then t: typespec := typespec$create(
							typeabs$make_idn(id))
				x := expr$create(exprabs$make_type_(t))
			   end
			return(x)
		   tag expr, perm (xx: expr):
			return(e_const(e, xx, wanttype))
		   tag unknown:
			clut: clutype := clutype${gen:   id.str,
						  parms: exprlist$new()}
			g_env$undefined(e, clut.gen)
			abs: exprabs
			if wanttype
			   then abs := exprabs$make_type_(typespec$create(
						typeabs$make_cluster_(clut)))
			   else abs := exprabs$make_apply(clut)
			   end
			return(expr$create(abs))
		   tag dreg, areg (i: int):
			return(expr$create(exprabs$make_int_(i)))
		   tag pc:
			why := "use of PC as constant"
		   tag usp:
			why := "use of USP as constant"
		   tag ccr:
			why := "use of CCR as constant"
		   tag sr:
			why := "use of SR as constant"
		   tag text, data:
			why := "use of address as constant"
		   tag epvar, spvar, tos:
			why := "use of variable as constant"
		   tag wvec:
			why := "use of wvec as constant"
		   tag prown, pcown:
			why := "use of parameterized own variable as constant"
		   tag rown, cown:
			why := "use of own variable as constant"
		   tag flabel, label:
			why := "use of label as constant"
		   end
	   tag type_ (t: typespec):
		return(expr$create(exprabs$make_type_(e_type(e, t))))
	   tag apply (clut: clutype):
		g_env$undefined(e, clut.gen)
		clut.parms := e_constlist(e, clut.parms, true)
		if wanttype
		   then t: typespec := typespec$create(
						typeabs$make_cluster_(clut))
			x := expr$create(exprabs$make_type_(t))
		   end
		return(x)
	   tag op (cop: clusterop):
		cop.type_ := e_type(e, cop.type_)
		cop.parms := e_constlist(e, cop.parms, true)
		return(x)
	   tag star:
		why := "use of * as constant"
	   tag select:
		if e.rparm_count < 0
		   then return(x) end
		why := "use of SEL value outside of SELPROC"
	   tag selnames:
		if e.cparm_count < 0
		   then return(x) end
		why := "use of SELNAMES outside of SELECTOR"
	   tag selops:
		if e.cparm_count < 0
		   then return(x) end
		why := "use of SELOPS outside of SELECTOR"
	   tag vec (elts: exprlist):
		return(expr$create(exprabs$make_vec(e_constlist(e, elts, false))))
	   tag tagcell (cons: tagcons):
		cons.tag_ := e_const(e, cons.tag_, false)
		cons.val := e_const(e, cons.val, false)
		tagcase cons.tag_.abs
		   tag int_ (i: int):
			big_tag = 2**14
			if i > 0  cand  i < big_tag
			   then return(x) end
		   others:
		   end
		why := "illegal tag value in constructor"
	   tag pair (pair: exprpair):
		pair.left := e_const(e, pair.left, false)
		pair.right := e_const(e, pair.right, false)
		tagcase pair.left.abs
		   tag int_:
			tagcase pair.right.abs
			   tag int_:
				return(x)
			   others:
			   end
		   others:
		   end
		why := "non-integer in *,,* expression"
	   tag minus (xx: expr):
		xx := e_const(e, xx, false)
		tagcase xx.abs
		   tag int_ (i: int):
			if i = _min_int
			   then g_env$err(e, "Integer value overflowed")
				i := _min_int + 1
			   end
			return(expr$create(exprabs$make_int_(-i)))
		   tag real_ (r: real):
			return(expr$create(exprabs$make_real_(-r)))
		   others:
			why := "illegal use of - sign"
		   end
	   tag sum (pair: exprpair):
		pair.left := e_const(e, pair.left, false)
		pair.right := e_const(e, pair.right, false)
		tagcase pair.left.abs
		   tag int_ (i: int):
			tagcase pair.right.abs
			   tag int_ (j: int):
				sum: int := i + j
				    except when overflow: sum := 131071 end
				if sum < _min_int  cor  sum > _max_int
				   then g_env$err(e, "Integer value overflowed")
					sum := _max_int
				   end
				return(expr$create(exprabs$make_int_(sum)))
			   tag real_:
				why := "mixed mode arithmetic"
			   others:
				lft: expr := pair.left
				pair.left := pair.right
				pair.right := lft
				return(x)
			   end
		   tag real_ (r: real):
			tagcase pair.right.abs
			   tag real_ (s: real):
				return(expr$create(exprabs$make_real_(r + s)))
			   tag int_:
				why := "mixed mode arithmetic"
			   others:
				why := "illegal use of + sign"
			   end
		   others:
			tagcase pair.right.abs
			   tag int_:
				return(x)
			   others:
				why := "illegal use of + sign"
			   end
		   end
	   others:
		return(x)
	   end
	g_env$err(e, why)
	return(expr$create(exprabs$make_bad(nil)))
	end e_const

e_constlist = proc (e: g_env, consts: exprlist, wanttype: bool)
							returns (exprlist)
	for i: int in exprlist$indexes(consts) do
		x: expr := consts[i]
		nx: expr := e_const(e, x, wanttype)
		if nx ~= x
		   then consts := exprlist$replace(consts, i, nx) end
		end
	return(consts)
	end e_constlist

e_expr = proc (e: g_env, x: expr) returns (expr)
	tagcase x.abs
	   tag idn (id: idn):
		tagcase id.kind
		   tag rparm, cparm, expr, perm, unknown:
			return(e_const(e, x, false))
		   tag tos:
			g_env$err(e, "use of last argument of QPROC")
			return(expr$create(exprabs$make_bad(nil)))
		   others:
			return(x)
		   end
	   others:
	   end
	return(e_const(e, x, false))
	end e_expr

g_expr = proc (e: g_env, x: expr, dest: idnkind)
	x := e_expr(e, x)
	tagcase x.abs
	   tag star:
		tagcase dest
		   tag tos:
			return
		   others:
			g_env$err(e, "illegal use of * expression")
		   end
	   tag idn (xa: idn):
		if xa.kind = dest
		   then return end
		tagcase xa.kind
		   tag epvar (disp: int):
			g_move_src(e, dest, _idisp_EP, disp)
		   tag spvar (disp: int):
			g_move_src(e, dest, _idisp_SP, disp)
		   tag rown (num: mref):
			disp: int := g_tenv$add_use(e.tenv, _use_rown, num)
			g_move_src(e, dest, _long, disp)
		   tag cown (num: mref):
			disp: int := g_tenv$add_use(e.tenv, _use_cown, num)
			g_move_src(e, dest, _long, disp)
		   tag prown (num: mref):
			disp: int := g_tenv$add_puse(e.tenv, _use_rown, num)
			me: g_menv := e.menv
			if disp = 0
			   then ainst(me, MOVEA, _R4, _indir_PP)
			   else ainst(me, MOVEA, _R4, _idisp_PP)
				immed(me, 4 * disp)
			   end
			g_move_src(e, dest, _indir_R4, 0)
		   tag pcown (num: mref):
			disp: int := g_tenv$add_puse(e.tenv, _use_cown, num)
			me: g_menv := e.menv
			if disp = 0
			   then ainst(me, MOVEA, _R4, _indir_PP)
			   else ainst(me, MOVEA, _R4, _idisp_PP)
				immed(me, 4 * disp)
			   end
			g_move_src(e, dest, _indir_R4, 0)
		   tag dreg (i: int):
			g_move_src(e, dest, _datad + i, 0)
		   tag areg (i: int):
			g_move_src(e, dest, _addrd + i, 0)
		   tag tos:
			g_env$err(e, "use of last argument as variable")
		   tag pc:
			g_env$err(e, "use of PC as variable")
		   tag unknown:
			g_env$err(e, "use of external name as variable")
		   others:
			g_const_expr(e, x, dest)
		   end
	   tag apply, op:
		g_routine(e, x, dest)
	   others:
		g_const_expr(e, x, dest)
	   end
	end g_expr

g_move_src = proc (e: g_env, dest: idnkind, src, sdisp: int)
	me: g_menv := e.menv
	dst, ddisp: int
	data: bool := true
	tagcase dest
	   tag epvar (disp: int):
		dst := idisp_EP_
		ddisp := disp
	   tag spvar (disp: int):
		dst := idisp_SP_
		ddisp := disp
	   tag rown (num: mref):
		ddisp := g_tenv$add_use(e.tenv, _use_rown, num)
		dst := long_
	   tag cown (num: mref):
		ddisp := g_tenv$add_use(e.tenv, _use_cown, num)
		dst := long_
	   tag prown (num: mref):
		ddisp := g_tenv$add_puse(e.tenv, _use_rown, num)
		dst := indir_R4_
		if src = dst
		   then dst := indir_R3_ end
		if ddisp = 0
		   then ainst(me, MOVEA, dst / 010, _indir_PP)
		   else ainst(me, MOVEA, dst / 010, _idisp_PP)
			immed(me, 4 * ddisp)
		   end
		ddisp := 0
	   tag pcown (num: mref):
		ddisp := g_tenv$add_puse(e.tenv, _use_cown, num)
		dst := indir_R4_
		if src = dst
		   then dst := indir_R3_ end
		if ddisp = 0
		   then ainst(me, MOVEA, dst / 010, _indir_PP)
		   else ainst(me, MOVEA, dst / 010, _idisp_PP)
			immed(me, 4 * ddisp)
		   end
		ddisp := 0
	   tag dreg (i: int):
		if src = _immed
		   then if sdisp >= -0200  cand  sdisp <= 0177
			   then ainst(me, MOVEQ, i, sdisp // 0400)
				return
			elseif sdisp = 0377
			   then ainst(me, MOVEQ, i, 0)
				ainst(me, SUBQB, 1, i)
				return
			end
		elseif src = _datad + i
		   then return end
		dst := i * 010 + datad_
		ddisp := 0
	   tag areg (i: int):
		if src = _imuse
		   then ainst(me, LEA, i, _long)
			udesc(me, sdisp)
		elseif src = _long
		   then ainst(me, MOVEA, i, _long)
			udesc(me, sdisp)
		elseif src ~= _immed
		   then if src = _addrd + i
			   then return end
			ainst(me, MOVEA, i, src)
			if sdisp ~= 0
			   then immed(me, sdisp) end
		else ainst(me, MOVEAW, i, _immed)
		     immed(me, sdisp)
		end
		return
	   tag tos:
		if src = _imuse
		   then xinst(me, PEA, _long)
			udesc(me, sdisp)
			return
		elseif src = _immed  cand
		       sdisp >= -0100000  cand  sdisp <= 077777
		   then xinst(me, PEA, _short)
			immed(me, sdisp)
			return
		end
		dst := pdecr_SP_
		ddisp := 0
	   tag text (loc: int):
		dst := short_
		ddisp := loc
	   tag data (loc: int):
		dst := long_
		ddisp := g_tenv$add_use(e.tenv, _use_global,
					mref$make_val(loc))
	   tag expr, perm (x: expr):
		e_const(e, x, false)
		g_env$err(e, "use of expression as variable")
		return
	   tag rparm, cparm:
		g_env$err(e, "use of parameter as variable")
		return
	   tag flabel, label:
		g_env$err(e, "use of label as variable")
		return
	   tag wvec:
		g_env$err(e, "use of wvec as variable")
		return
	   tag pc:
		g_env$err(e, "use of PC as variable")
		return
	   tag usp:
		g_env$err(e, "use of USP as variable")
		return
	   tag ccr:
		g_env$err(e, "use of CCR as variable")
		return
	   tag sr:
		g_env$err(e, "use of SR as variable")
		return
	   tag unknown:
		g_env$err(e, "use of external name as variable")
		return
	   end
	if src = _imuse
	   then minst(me, MOVE, dst, _immed)
		udesc(me, sdisp)
	elseif src = _immed  cand  sdisp >= -0200  cand  sdisp <= 0177
	   then ainst(me, MOVEQ, _N7, sdisp // 0400)
		minst(me, MOVE, dst, _datad_N7)
	else minst(me, MOVE, dst, src)
	     if sdisp ~= 0
		then if src = _long
			then udesc(me, sdisp)
		     elseif src = _immed
			then immed(me, sdisp / 0100000)
			     immed(me, sdisp)
		     else immed(me, sdisp) end
		end
	end
	if ddisp ~= 0
	   then if dst = long_
		   then udesc(me, ddisp)
		   else immed(me, ddisp)
		   end
	   end
	end g_move_src

g_const_expr = proc (e: g_env, x: expr, dest: idnkind)
	ok: bool := true
	ival: int
	tagcase x.abs
	   tag null_:
		ival := 0
	   tag bool_ (b: bool):
		if b
		   then ival := 0377
		   else ival := 0
		   end
	   tag int_ (i: int):
		ival := i + i + 1
	   tag char_ (c: char):
		ival := char$c2i(c)
	   tag pair (p: exprpair):
		tagcase p.left.abs
		   tag int_ (l: int):
			tagcase p.right.abs
			   tag int_ (r: int):
				if ~(l = 0  cor  (l = -1  cand  r < 0))
				   then g_move_pair(e, dest, l, r)
					return
				   end
				ival := r
				ok := true
			   others:
				ok := false
			   end
		   others:
			ok := false
		   end
	   others:
		ok := false
	   end
	if ok
	   then if ival = 0
		   then g_clr_dest(e, dest)
		elseif ival = 1
		   then g_move_src(e, dest, _datad_N0, 0)
		else g_move_src(e, dest, _immed, ival) end
		return
	   end
	te: g_tenv := e.tenv
	val: mref, pflag: int := g_tenv$store_const(te, x)
	if pflag ~= _plain
	   then disp: int := g_tenv$add_puse(te, _use_const, val)
		if disp = 0
		   then g_move_src(e, dest, _indir_PP, 0)
		   else g_move_src(e, dest, _idisp_PP, 4 * disp)
		   end
	   else disp: int := g_tenv$add_use(te, _use_const, val)
		g_move_src(e, dest, _imuse, disp)
	   end
	end g_const_expr

g_routine = proc (e: g_env, x: expr, dest: idnkind)
	te: g_tenv := e.tenv
	val: mref, pflag: int := g_tenv$store_rconst(te, x, -1)
	if pflag ~= _plain
	   then disp: int := g_tenv$add_puse(te, _use_const, val)
		if disp = 0
		   then g_move_src(e, dest, _indir_PP, 0)
		   else g_move_src(e, dest, _idisp_PP, 4 * disp)
		   end
	   else disp: int := g_tenv$add_use(te, _use_const, val)
		g_move_src(e, dest, _imuse, disp)
	   end
	end g_routine

g_move_pair = proc (e: g_env, dest: idnkind, l, r: int)
	me: g_menv := e.menv
	dst, ddisp: int
	tagcase dest
	   tag epvar (disp: int):
		dst := idisp_EP_
		ddisp := disp
	   tag spvar (disp: int):
		dst := idisp_SP_
		ddisp := disp
	   tag rown (num: mref):
		ddisp := g_tenv$add_use(e.tenv, _use_rown, num)
		dst := long_
	   tag cown (num: mref):
		ddisp := g_tenv$add_use(e.tenv, _use_cown, num)
		dst := long_
	   tag prown (num: mref):
		ddisp := g_tenv$add_puse(e.tenv, _use_rown, num)
		if ddisp = 0
		   then ainst(me, MOVEA, _R4, _indir_PP)
		   else ainst(me, MOVEA, _R4, _idisp_PP)
			immed(me, 4 * ddisp)
		   end
		dst := indir_R4_
		ddisp := 0
	   tag pcown (num: mref):
		ddisp := g_tenv$add_puse(e.tenv, _use_cown, num)
		if ddisp = 0
		   then ainst(me, MOVEA, _R4, _indir_PP)
		   else ainst(me, MOVEA, _R4, _idisp_PP)
			immed(me, 4 * ddisp)
		   end
		dst := indir_R4_
		ddisp := 0
	   tag dreg (i: int):
		dst := i * 010 + datad_
		ddisp := 0
	   tag areg (i: int):
		ainst(me, MOVEA, i, _immed)
		immed(me, l)
		immed(me, r)
		return
	   tag tos:
		dst := pdecr_SP_
		ddisp := 0
	   tag text (loc: int):
		dst := short_
		ddisp := loc
	   tag data (loc: int):
		dst := long_
		ddisp := g_tenv$add_use(e.tenv, _use_global,
					mref$make_val(loc))
	   tag expr, perm (x: expr):
		e_const(e, x, false)
		g_env$err(e, "use of expression as variable")
		return
	   tag rparm, cparm:
		g_env$err(e, "use of parameter as variable")
		return
	   tag flabel, label:
		g_env$err(e, "use of label as variable")
		return
	   tag wvec:
		g_env$err(e, "use of wvec as variable")
		return
	   tag pc:
		g_env$err(e, "use of PC as variable")
		return
	   tag usp:
		g_env$err(e, "use of USP as variable")
		return
	   tag ccr:
		g_env$err(e, "use of CCR as variable")
		return
	   tag sr:
		g_env$err(e, "use of SR as variable")
		return
	   tag unknown:
		g_env$err(e, "use of external name as variable")
		return
	   end
	minst(me, MOVE, dst, _immed)
	immed(me, l)
	immed(me, r)
	if ddisp ~= 0
	   then if dst = long_
		   then udesc(me, ddisp)
		   else immed(me, ddisp)
		   end
	   end
	end g_move_pair

g_clr_dest = proc (e: g_env, dest: idnkind)
	me: g_menv := e.menv
	dst, ddisp: int
	tagcase dest
	   tag epvar (disp: int):
		dst := _idisp_EP
		ddisp := disp
	   tag spvar (disp: int):
		dst := _idisp_SP
		ddisp := disp
	   tag rown (num: mref):
		ddisp := g_tenv$add_use(e.tenv, _use_rown, num)
		dst := _long
	   tag cown (num: mref):
		ddisp := g_tenv$add_use(e.tenv, _use_cown, num)
		dst := _long
	   tag prown (num: mref):
		ddisp := g_tenv$add_puse(e.tenv, _use_rown, num)
		if ddisp = 0
		   then ainst(me, MOVEA, _R4, _indir_PP)
		   else ainst(me, MOVEA, _R4, _idisp_PP)
			immed(me, 4 * ddisp)
		   end
		dst := _indir_R4
		ddisp := 0
	   tag pcown (num: mref):
		ddisp := g_tenv$add_puse(e.tenv, _use_cown, num)
		if ddisp = 0
		   then ainst(me, MOVEA, _R4, _indir_PP)
		   else ainst(me, MOVEA, _R4, _idisp_PP)
			immed(me, 4 * ddisp)
		   end
		dst := _indir_R4
		ddisp := 0
	   tag dreg (i: int):
		ainst(me, MOVEQ, i, 0)
		return
	   tag areg (i: int):
		ainst(me, SUBA, i, _addrd + i)
		return
	   tag tos:
		dst := _pdecr_SP
		ddisp := 0
	   tag text (loc: int):
		dst := _short
		ddisp := loc
	   tag data (loc: int):
		dst := _long
		ddisp := g_tenv$add_use(e.tenv, _use_global,
					mref$make_val(loc))
	   tag expr, perm (x: expr):
		e_const(e, x, false)
		g_env$err(e, "use of expression as variable")
		return
	   tag rparm, cparm:
		g_env$err(e, "use of parameter as variable")
		return
	   tag flabel, label:
		g_env$err(e, "use of label as variable")
		return
	   tag wvec:
		g_env$err(e, "use of wvec as variable")
		return
	   tag pc:
		g_env$err(e, "use of PC as variable")
		return
	   tag usp:
		g_env$err(e, "use of USP as variable")
		return
	   tag ccr:
		g_env$err(e, "use of CCR as variable")
		return
	   tag sr:
		g_env$err(e, "use of SR as variable")
		return
	   tag unknown:
		g_env$err(e, "use of external name as variable")
		return
	   end
	xinst(me, CLR, dst)
	if ddisp ~= 0
	   then if dst = _long
		   then udesc(me, ddisp)
		   else immed(me, ddisp)
		   end
	   end
	end g_clr_dest
