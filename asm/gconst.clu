%	GCONST CLU
% Copyright Massachusetts Institute of Technology 1980, 1989
%	MC68000 Assembler: constant generator

e_type = proc (e: g_env, t: typespec) returns (typespec)
	why: str
	tagcase t.abs
	   tag cluster_ (clut: clutype):
		g_env$undefined(e, clut.gen)
		if exprlist$size(clut.parms) = 1  cand
		   exprabs$is_star(exprlist$bottom(clut.parms).abs)
		   then return(t) end
		clut.parms := e_constlist(e, clut.parms, true)
		return(t)
	   tag select (selt: seltype):
		g_env$undefined(e, selt.gen)
		for fs: fieldspec in fieldspeclist$elements(selt.parms) do
			fs.type_ := e_type(e, fs.type_)
			end
		return(t)
	   tag apply (apt: applytype):
		g_env$undefined(e, apt.gen)
		apt.args := e_typelist(e, apt.args)
		apt.vals := e_typelist(e, apt.vals)
		for sig: exception in exceptionlist$elements(apt.sigs) do
			sig.types := e_typelist(e, sig.types)
			end
		return(t)
	   tag idn (id: idn):
		tagcase id.kind
		   tag rparm, cparm:
			return(t)
		   others:
			x: expr := e_const(e,
					   expr$create(exprabs$make_idn(id)),
					   true)
			tagcase x.abs
			   tag type_ (tt: typespec):
				return(tt)
			   others:
				why := "use of expression as type"
			   end
		   end
	   tag cvt_:
		if g_env$in_cluster(e)
		   then return(e.up_type) end
		why := "use of CVT outside of cluster"
	   tag seltype:
		if e.rparm_count < 0
		   then return(t) end
		why := "use of SELTYPE outside of SELPROC"
	   tag unknown, any_:
		return(t)
	   end
	g_env$err(e, why)
	return(typespec$create(typeabs$make_unknown(nil)))
	end e_type

e_typelist = proc (e: g_env, types: typelist) returns (typelist)
	for i: int in typelist$indexes(types) do
		t: typespec := types[i]
		nt: typespec := e_type(e, t)
		if nt ~= t
		   then types := typelist$replace(types, i, nt) end
		end
	return(types)
	end e_typelist

g_type = proc (e: g_tenv, t: typespec) returns (mref, int)
	val: mref
	pflag: int
	code: int
	bad: bool := false
	tagcase t.abs
	   tag cluster_ (ta: clutype):
		if exprlist$size(ta.parms) = 1  cand
		   exprabs$is_star(exprlist$bottom(ta.parms).abs)
		   then val := g_tenv$store_str(e, ta.gen)
			pflag := _cparm
			code := _tdesc_mselect
		   else val, pflag := g_clutype(e, ta)
			code := _tdesc_cluster
		   end
	   tag select (ta: seltype):
		val, pflag := g_seltype(e, ta)
		code := _tdesc_select
	   tag apply (ta: applytype):
		val, pflag := g_applytype(e, ta)
		code := _tdesc_routine
	   tag idn (ta: idn):
		tagcase ta.kind
		   tag rparm (num: mref):
			val := num
			code := _tdesc_rparm
			pflag := _rparm
		   tag cparm (num: mref):
			val := num
			code := _tdesc_cparm
			pflag := _cparm
		   others:
			bad := true
		   end
	   tag seltype:
		val := mref$make_val(0)
		pflag := _rparm
		code := _tdesc_selparm
	   tag any_:
		val, pflag := g_clutype(e, clutype${gen:  "any",
						    parms: exprlist$new()})
		code := _tdesc_cluster
	   others:
		bad := true
	   end
	if bad
	   then return(mref$make_val(0), _plain) end
	val := g_tenv$store_cell(e, code, val)
	return(val, pflag)
	end g_type

g_clutype = proc (e: g_tenv, dut: clutype) returns (mref, int)
	parms: mref, pflag: int := g_constlist(e, dut.parms)
	xname: mref := g_tenv$store_str(e, dut.gen)
	val: mref := g_tenv$store_vec(e, qv$[xname, parms])
	return(val, pflag)
	end g_clutype

g_seltype = proc (e: g_tenv, sel: seltype) returns (mref, int)
	xname: mref := g_tenv$store_str(e, sel.gen)
	fields: fieldspeclist := sel.parms
	size: int := fieldspeclist$size(fields)
	pflag: int := _plain
	fwrds: qv := qv$new()
	for fld: fieldspec in fieldspeclist$elements(fields) do
		selname: mref := g_tenv$store_str(e, fld.sel)
		val: mref, pflg: int := g_tenv$store_tdesc(e, fld.type_)
		if pflg > pflag
		   then pflag := pflg end
		fwrds := qv$addh(fwrds, g_tenv$store_vec(e, qv$[selname, val]))
		end
	val: mref := g_tenv$store_vec(e, fwrds)
	val := g_tenv$store_vec(e, qv$[xname, val])
	return(val, pflag)
	end g_seltype

g_applytype = proc (e: g_tenv, at: applytype) returns (mref, int)
	xname: mref := g_tenv$store_str(e, at.gen)
	args: mref, pflg1: int := g_typelist(e, at.args)
	vals: mref, pflg2: int := g_typelist(e, at.vals)
	sigs: mref, pflg3: int := g_exceptionlist(e, at.sigs)
	val: mref := g_tenv$store_vec(e, qv$[xname, args, vals, sigs])
	if pflg2 > pflg1
	   then pflg1 := pflg2 end
	if pflg3 > pflg1
	   then pflg1 := pflg3 end
	return(val, pflg1)
	end g_applytype

g_constlist = proc (e: g_tenv, exprs: exprlist) returns (mref, int)
	pflag: int := _plain
	vals: qv := qv$new()
	for exp: expr in exprlist$elements(exprs) do
		val: mref, pflg: int := g_tenv$store_const(e, exp)
		vals := qv$addh(vals, val)
		if pflg > pflag
		   then pflag := pflg end
		end
	val: mref := g_tenv$store_vec(e, vals)
	return(val, pflag)
	end g_constlist

g_typelist = proc (e: g_tenv, types: typelist) returns (mref, int)
	pflag: int := _plain
	vals: qv := qv$new()
	for t: typespec in typelist$elements(types) do
		val: mref, pflg: int := g_tenv$store_tdesc(e, t)
		vals := qv$addh(vals, val)
		if pflg > pflag
		   then pflag := pflg end
		end
	val: mref := g_tenv$store_vec(e, vals)
	return(val, pflag)
	end g_typelist

g_exceptionlist = proc (e: g_tenv, sigs: exceptionlist) returns (mref, int)
	pflag: int := _plain
	vals: qv := qv$new()
	for sig: exception in exceptionlist$elements(sigs) do
		val: mref, pflg: int := g_tenv$store_edesc(e, sig)
		vals := qv$addh(vals, val)
		if pflg > pflag
		   then pflag := pflg end
		end
	val: mref := g_tenv$store_vec(e, vals)
	return(val, pflag)
	end g_exceptionlist

g_exception = proc (e: g_tenv, sig: exception) returns (mref, int)
	xname: mref := g_tenv$store_str(e, sig.name)
	vals: mref, pflag: int := g_typelist(e, sig.types)
	val: mref := g_tenv$store_vec(e, qv$[xname, vals])
	return(val, pflag)
	end g_exception

g_const = proc (e: g_tenv, x: expr) returns (mref, int)
	val: mref
	code: int
	pflag: int := _plain
	bad: bool := false
	tagcase x.abs
	   tag null_:
		val := mref$make_val(0)
		code := _const_null
	   tag bool_ (xa: bool):
		if xa
		   then val := mref$make_val(1)
		   else val := mref$make_val(0)
		   end
		code := _const_bool
	   tag int_ (xa: int):
		val := mref$make_val(xa)
		code := _const_int
	   tag real_ (xa: real):
		val := mref$make_val(_cvt[real, int](xa))
		code := _const_real
	   tag char_ (xa: char):
		val := mref$make_val(char$c2i(xa))
		code := _const_char
	   tag str (xa: str):
		val := g_tenv$store_str(e, xa)
		code := _const_string
	   tag xstr (xa: qi):
		chars: qv := qv$new()
		for i: int in qi$elements(xa) do
			chars := qv$addh(chars, mref$make_val(i))
			end
		val := g_tenv$store_vec(e, chars)
		code := _const_xstring
	   tag type_ (xa: typespec):
		val, pflag := g_tenv$store_tdesc(e, xa)
		code := _const_type
	   tag idn (xa: idn):
		tagcase xa.kind
		   tag rparm (num: mref):
			val := num
			pflag := _rparm
			code := _const_rparm
		   tag cparm (num: mref):
			val := num
			pflag := _cparm
			code := _const_cparm
		   others:
			bad := true
		   end
	   tag select (xa: int):
		val := mref$make_val(xa)
		code := _const_selector
		pflag := _rparm
	   tag selnames:
		val := mref$make_val(0)
		code := _const_nvec
		pflag := _cparm
	   tag selops (nm: name):
		val := g_tenv$store_str(e, nm)
		val := g_tenv$store_vec(e, qv$[val,
					       mref$make_val(-1),
					       mref$make_val(-1)])
		code := _const_rvec
		pflag := _cparm
	   tag pair (pair: exprpair):
		tagcase pair.left.abs
		   tag int_ (i: int):
			tagcase pair.right.abs
			   tag int_ (j: int):
				val := g_tenv$store_vec(e,
							qv$[mref$make_val(j),
							    mref$make_val(i)])
				code := _const_word
			   others:
				bad := true
			   end
		   others:
			bad := true
		   end
	   tag vec (elts: exprlist):
		val, pflag := g_constlist(e, elts)
		code := _const_seq
	   tag tagcell (cons: tagcons):
		tagcase cons.tag_.abs
		   tag int_ (i: int):
			val, pflag := g_tenv$store_const(e, cons.val)
			val := g_tenv$store_vec(e,
						qv$[mref$make_val(i), val])
			code := _const_oneof
		   others:
			bad := true
		   end
	   tag sum (pair: exprpair):
		val, pflag := g_tenv$store_const(e, pair.left)
		tagcase pair.right.abs
		   tag int_ (i: int):
			val := g_tenv$store_vec(e,
						qv$[mref$make_val(i), val])
			code := _const_rel
		   others:
			bad := true
		   end
	   tag apply, op:
		val, pflag := g_rconst(e, x, -1)
		return(val, pflag)
	   others:
		bad := true
	   end
	if bad
	   then return(mref$make_val(0), _plain) end
	val := g_tenv$store_cell(e, code, val)
	return(val, pflag)
	end g_const

g_rconst = proc (e: g_tenv, x: expr, nargs: int) returns (mref, int)
	val: mref
	pflag: int
	xname, parms: mref
	tagcase x.abs
	   tag apply (clut: clutype):
		val := e.no_type
		xname := g_tenv$store_str(e, clut.gen)
		parms, pflag := g_constlist(e, clut.parms)
	   tag op (cop: clusterop):
		val, pflag := g_tenv$store_tdesc(e, cop.type_)
		xname := g_tenv$store_str(e, cop.name)
		pflg: int
		parms, pflg := g_constlist(e, cop.parms)
		if pflg > pflag
		   then pflag := pflg end
	   others:
		return(mref$make_val(0), _plain)
	   end
	val := g_tenv$store_vec(e,  qv$[val,
					xname,
					parms,
					mref$make_val(nargs),
					mref$make_val(-1)])
	val := g_tenv$store_cell(e, _const_routine, val)
	return(val, pflag)
	end g_rconst
