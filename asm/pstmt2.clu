%	PSTMT2	CLU
% Copyright Massachusetts Institute of Technology 1980, 1989
%	MC68000 Assembler:  parsing routines for statements

% condition => name | name (exprlist)

p_condition = proc (e: p_env) returns (condition) signals (bad)
	n: name := p_name(e)
	   except when none: p_env$assume(e, "exceptional condition")
			     signal bad
		  end
	vals: exprlist := p_plist[expr](e, p_expr, _none_ok, _no_empty,
								"expression")
	return(condition${name: n,
			  vals: vals})
	end p_condition

p_minvoke = proc (e: p_env) returns (stmtabs)
	x: expr := p_expr1(e, "expression")
	tagcase e.peek1
	   tag l_paren:
		args: exprlist := p_plist[expr](e, p_expr, _no_none, _empty_ok,
								"expression")
		return(stmtabs$make_invoke(invoke${apply: x,
						   args:  args}))
	   others:
		p_env$err(e, "expression used as statement")
		return(stmtabs$make_expr(x))
	   end
	end p_minvoke

p_invoke = proc (e: p_env) returns (invoke)
	x: expr := p_expr1(e, "expression")
	args: exprlist := p_plist[expr](e, p_expr, _no_none, _empty_ok,
								"expression")
	return(invoke${apply: x,
		       args:  args})
	end p_invoke

p_inst = proc (e: p_env, opcode: opcodeform) returns (stmtabs)
	src, dst: instval
	if e.line ~= e.peekline
	   then src := instval$make_none(nil)
	   else src := p_instval(e)
	   end
	if instval$is_none(src)
	   then dst := src
	   else tagcase e.peek1
		   tag comma:
			p_env$next_token(e)
			dst := p_instval(e)
			if instval$is_none(dst)
			   then p_env$err(e, "missing destination operand") end
		   others:
			dst := src
			src := instval$make_none(nil)
		   end
	   end
	return(stmtabs$make_inst(instform${opcode: opcode,
					   src:    src,
					   dst:    dst}))
	end p_inst

p_instval = proc (e: p_env) returns (instval)
	tagcase e.peek1
	   tag this_:
		p_env$next_token(e)
		return(instval$make_this(nil))
	   tag next_:
		p_env$next_token(e)
		return(instval$make_next(nil))
	   tag minus:
		if token$is_l_paren(p_env$peek(e, 2))  cand
		   token$is_idn(p_env$peek(e, 3))  cand
		   token$is_r_paren(p_env$peek(e, 4))
		   then p_env$next_token(e)
			p_env$next_token(e)
			reg: idn := p_idn(e)
			p_env$next_token(e)
			return(instval$make_pdecr(reg))
		   end
	   tag l_paren:
		p_env$next_token(e)
		if token$is_idn(e.peek1)  cand
		   token$is_r_paren(p_env$peek(e, 2))
		   then reg: idn := p_idn(e)
			p_env$next_token(e)
			tagcase e.peek1
			   tag plus:
				p_env$next_token(e)
				return(instval$make_pincr(reg))
			   others:
				return(instval$make_indir(reg))
			   end
		   end
		return(p_disp_val(e, expr$create(exprabs$make_int_(0))))
	   tag idn:
		tagcase p_env$peek(e, 2)
		   tag minus, slash:
			return(p_rspeclist(e))
		   others:
		   end
	   tag type_, l_bkt, l_angle, selops_:
		return(instval$make_expr(p_expr1(e, "expression")))
	   tag expr:
	   others:
		return(instval$make_none(nil))
	   end
	disp: expr := p_expr1(e, "expression")
	tagcase e.peek1
	   tag l_paren:
		p_env$next_token(e)
		return(p_disp_val(e, disp))
	   others:
		return(instval$make_expr(disp))
	   end
	end p_instval

p_disp_val = proc (e: p_env, disp: expr) returns (instval)
	reg: idn := p_idn(e)
	    except when none:
			 p_env$assume(e, "reg) in disp(reg) or (reg,idx)")
			 return(instval$make_expr(disp))
		   end
	tagcase e.peek1
	   tag r_paren:
		p_env$next_token(e)
	   tag comma:
		p_env$next_token(e)
		idx: idn := p_idn(e)
		   except when none:
				p_env$assume(e, "idx) in (reg,idx)")
				return(instval$make_idisp(
						instpair${reg: reg,
							  disp: disp}))
			  end
		long: bool := true
		tagcase e.peek1
		   tag slash:
			p_env$next_token(e)
			tagcase e.peek1
			   tag idn (id: idn):
				p_env$next_token(e)
				if id.str = "w"
				   then long := false
				elseif id.str ~= "l"
				   then p_env$err(e, "illegal mode: " || id.str)
				end
			   others:
				p_env$assume(e, "L or W after /")
			   end
		   others:
		   end
		tagcase e.peek1
		   tag r_paren:
			p_env$next_token(e)
		   others:
			p_env$assume(e, ") in (reg,idx)")
		   end
		return(instval$make_index(instquad${reg:  reg,
						    idx:  idx,
						    long: long,
						    disp: disp}))
	   others:
		p_env$assume(e, ") in (reg)")
	   end
	return(instval$make_idisp(instpair${reg:  reg,
					    disp: disp}))
	end p_disp_val

p_rspeclist = proc (e: p_env) returns (instval)
	rlist: rspeclist := rspeclist$new()
	while true do
		tagcase e.peek1
		   tag idn (from: idn):
			p_env$next_token(e)
			to: idn
			tagcase e.peek1
			   tag minus:
				p_env$next_token(e)
				to := p_idn(e)
			   others:
				to := from
			   end
			rlist := rspeclist$addh(rlist, rspecpair${from: from,
								  to:   to})
		   others:
			break
		   end
		tagcase e.peek1
		   tag slash:
			p_env$next_token(e)
		   others:
			break
		   end
		end
	return(instval$make_rlist(rlist))
	end p_rspeclist

% except => EXCEPT exceptarms END except | RESIGNAL namelist
% exceptarms => whenarms | whenarms OTHERS mdecl cbody
% whenarms => empty | WHEN namelist whendecl cbody whenarms

p_except = proc (e: p_env, st: stmt) returns (stmt)
	while true do
		tagcase e.peek1
		   tag except_:
			p_env$next_token(e)
		   tag resignal_:
			p_env$next_token(e)
			l: int := e.line
			sigs: namelist := p_clist[name](e, p_name, "name")
			rs: resignalstmt := resignalstmt${stmt:   st,
							  resigs: sigs}
			st := stmt$create(stmtabs$make_resignal_(rs), l)
			continue
		   others:
			return(st)
		   end
		l: int := e.line
		arms: handlerlist := p_list[handler](e, p_whenarm, _empty_ok,
								"WHEN arm")
		oarm: mothersarm
		tagcase e.peek1
		   tag others_:
			p_env$next_token(e)
			line: int := e.line
			var: midn := p_midn(e)
			bod: stmtlist := p_cbody(e, _misc_body, ": in OTHERS...: body")
			oarm := mothersarm$make_arm(othersarm${var:  var,
							       body: bod,
							       line: line})
		   others:
			oarm := mothersarm$make_none(nil)
		   end
		xs: exceptstmt := exceptstmt${stmt:    st,
					      arms:    arms,
					      others_: oarm}
		st := stmt$create(stmtabs$make_except_(xs), l)
		p_end(e, "END of EXCEPT...END statement")
		end
	end p_except

p_whenarm = proc (e: p_env) returns (handler) signals (none, bad)
	tagcase e.peek1
	   tag when_: p_env$next_token(e)
	   others:    signal none
	   end
	line: int := e.line
	names: namelist := p_clist[name](e, p_name, "name")
	vars: idnlist := p_plist[idn](e, p_idn, _none_ok, _no_empty, "idn")
	bod: stmtlist := p_cbody(e, _when_body, ": in WHEN...: body")
	return(handler${names: names,
			vars:  vars,
			body:  bod,
			line:  line})
	end p_whenarm

% midn => empty | (idn)

p_midn = proc (e: p_env) returns (midn)
	vars: idnlist := p_plist[idn](e, p_idn, _none_ok, _no_empty, "idn")
	z: int := idnlist$size(vars)
	if z = 0
	   then return(midn$make_none(nil))
	elseif z > 1
	   then p_env$err(e, "more than one idn listed") end
	return(midn$make_idn(idnlist$bottom(vars)))
	end p_midn

% cbody => : body

p_cbody = proc (e: p_env, kind: int, assume: str) returns (stmtlist)
	tagcase e.peek1
	   tag colon: p_env$next_token(e)
	   others:    p_env$assume(e, assume)
	   end
	return(p_body(e, kind))
	end p_cbody

% body => stmtlist

p_body = proc (e: p_env, kind: int) returns (stmtlist)
	p_env$begin_body(e, kind)
	bod: stmtlist := p_slist[stmt](e, p_stmt)
	p_env$end_body(e)
	return(bod)
	end p_body

p_wvecstmt = proc (e: p_env) returns (stmtabs) signals (bad)
	p_env$err(e, "illegal use of WVEC statement")
	p_wveclist(e)
	signal bad
	end p_wvecstmt

p_ownstmt = proc (e: p_env) returns (stmtabs) signals (bad)
	p_env$err(e, "illegal use of OWN statement")
	p_ownslist(e)
	signal bad
	end p_ownstmt

p_varstmt = proc (e: p_env) returns (stmtabs) signals (bad)
	p_env$err(e, "illegal use of OWN statement")
	p_varslist(e)
	signal bad
	end p_varstmt

p_end = proc (e: p_env, assume: str)
	tagcase e.peek1
	   tag end_: 
	   others:   p_env$assume(e, assume)
		     return
	   end
	nm: str
	tagcase p_env$peek(e, 2)
	   tag idn (k: idn):
		nm := k.str
	   tag stmtkey (key: stmtkey):
		tagcase key
		   tag opcode (code: opcodeform):
			nm := code.str
		   others:
			nm := "!"
		   end
	   tag is_:
		nm := "is"
	   others:
		nm := "!"
	   end
	if nm = e.applystr  cor  nm = e.clustr
	   then	tagcase p_env$peek(e, 3)
		   tag idn, eof, is_:
			p_env$assume(e, assume)
			return
		   others:
		   end
	   end
	p_env$next_token(e)
	end p_end

% Flush until we find something that definitely starts or ends a statement,
% or that definitely ends the kind of body we are in.

p_find_a_stmt = proc (e: p_env) returns (bool)
	flushed: bool := false
	found: bool := false
	while true do
		tagcase e.peek1
		   tag elf_, else_:
			if p_env$in_body(e, _then_body) then break end
		   tag then_:
			if p_env$in_body(e, _if_body) then break end
		   tag when_, others_:
			if p_env$in_body(e, _when_body) then break end
		   tag end_, defnkey, returns_, yields_, where_, is_, has_, eof:
			break
		   tag stmtkey, except_:
			found := true
			break
		   others:
		   end
		if ~flushed
		   then	p_env$err(e, "looking for a statement")
			flushed := true
		   end
		p_env$next_token(e)
		end
	if flushed
	   then p_env$err(e, "resuming parse at this point") end
	return(found)
	end p_find_a_stmt
