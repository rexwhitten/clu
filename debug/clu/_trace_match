%% Copyright Massachusetts Institute of Technology 1981, 1989

%%% Enable or disable the various forms of tracing ("to", "from", etc.) for all
%%% routines (or slots or exception handlers) whose name contains the given
%%% string S as a substring. All of the routines defined here, with the
%%% exception of _Apply_to_Match, _Apply_to_Signal_Match, and _Match_slots,
%%% are user-interface routines.
%%% (SEP/Nov  7 1984)

_Trace_Match = proc (S: string);
    _Apply_to_Match(S, _Trace, true);
    end _Trace_Match;

_Trace_to_Match = proc (S: string);
    _Apply_to_Match(S, _Trace_To, true);
    end _Trace_to_Match;

_Trace_From_Match = proc (S: string);
    _Apply_to_Match(S, _Trace_From, true);
    end _Trace_From_Match;

_Untrace_Match = proc (S: string);
    _Apply_to_Match(S, _Untrace, true);
    end _Untrace_Match;

_Untrace_to_Match = proc (S: string);
    _Apply_to_Match(S, _Untrace_To, true);
    end _Untrace_to_Match;

_Untrace_From_Match = proc (S: string);
    _Apply_to_Match(S, _Untrace_From, true);
    end _Untrace_From_Match;

_Apply_to_Match = proc (S: string, Trc_Rtn: _trace_rtn, Do_Print: bool);
    _trace_rtn = proctype (_obj) signals (not_found);
    ss = sequence[string];
    Flag: bool := _Enter_System();
    Rtn_Tab: _rtn_table := _Get_Rtn_Table();
    PO: stream := stream$Primary_Output();
    for RI: _rtn_info in _rtn_table$Elements(Rtn_Tab) do
	if (string$IndexS(S, RI.Name) ~= 0)
	   then	Used: bool := false;
		if (_rtn_info$Uses_Params(RI))
		   then for RInst: _obj in _All_Instantiations(RI) do
			    Trc_Rtn(RInst)
			    Used := true;
			    end;
		   else Trc_Rtn(RI.Routine)
			Used := true;
		   end;
		if (Do_Print cand Used)
		   then stream$PutS(PO, RI.Name);
			stream$PutC(PO, '(');
			First: bool := true;
			for Arg_S: string in ss$Elements(RI.Args_Names) do
			    if (First)
			       then First := false;
			       else stream$PutS(PO, ", ");
			       end;
			    stream$PutS(PO, Arg_S);
			    end;
			stream$PutL(PO, ")");
		   end;
	   end;
	end;
    _Exit_System(Flag);
    end _Apply_to_Match;


_Trace_Signal_Match = proc (S: string);
    _Apply_to_Signal_Match(S, _Trace_Signal, true);
    end _Trace_Signal_Match;

_Untrace_Signal_Match = proc (S: string);
    _Apply_to_Signal_Match(S, _Untrace_Signal, true);
    end _Untrace_Signal_Match;

_Apply_to_Signal_Match = proc (S: string, Trc_Rtn: _signal_trc_rtn, Do_Print: bool);
    _signal_trc_rtn = proctype (string) signals (unknown_signal);
    ss = sequence[string];
    Flag: bool := _Enter_System();
    S := _scan$Id(string$S2AC(S), false);	%% Lower the string.
    PO: stream := stream$Primary_Output();
    for Sig_Area: _signal_area in _All_Signal_Areas() do
	for Sg_Blk: _signal_block in _signal_area$Elements(Sig_Area) do
	    if (string$IndexS(S, Sg_Blk.Name) ~= 0)
	       then Trc_Rtn(Sg_Blk.Name);
		       except when Unknown_Signal:
				   continue;
			      end;
		    if (Do_Print)
		       then stream$PutL(PO, Sg_Blk.Name);
		       end;
	       end;
	    end;
	end;
    _Exit_System(Flag);
    end _Apply_to_Signal_Match;


_Trace_Slots_Match = proc (P: _obj, S: string) signals (not_found);
    _Match_Slots(P, S, true);
       resignal Not_Found;
    end _Trace_Slots_Match;

_Untrace_Slots_Match = proc (P: _obj, S: string) signals (not_found);
    _Match_Slots(P, S, false);
       resignal Not_Found;
    end _Untrace_Slots_Match;

_Match_Slots = proc (P: _obj, S: string, Trace_It: bool) signals (not_found);
    Rtn_Inf: _rtn_info;
    RTI: _rtn_trace_info;
    Flag: bool := _Enter_System();
    begin
	Rtn_Inf := _Get_Rtn_Info(P);
	RTI := _Get_Trace_Info(P);
	end;
       except when Not_Found:
		   _Exit_System(Flag);
		   signal Not_Found;
	      end;
    PS: pstream := pstream$Primary_Output();
    I: int := 0;
    pstream$Pause(PS, "");
    for Callee, Slot: _obj in _Call_Slots(P, Rtn_Inf) do
	Name: string;
	I := I + 1;
	if (_obj$Is_BVec(Callee))
	   then Name := _CVT[_obj,string](Callee);
	   else Name := _Routine_Name(Callee);
	   end;
	if (string$IndexS(S, Name) ~= 0)
	   then pstream$PutRight(PS, int$Unparse(I), 3);
		pstream$Text(PS, ":   ");
		pstream$Pause(PS, Name);
		if (Trace_It)
                   then _Trace_Range (P, I, I);
                   else _Untrace_Range (P, I, I);
		   end;
	   end;
           except when Not_Found:
                    _Exit_System (Flag);
                    signal Not_Found;
                end;
	end;
    _Exit_System(Flag);
    end _Match_Slots;
