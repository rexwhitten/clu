%% Copyright Massachusetts Institute of Technology 1980, 1989

%%% A routine table stores _rtn_info records, and is indexed by the name of
%%% the routine.
%%% (SEP/Nov  7 1984)

_rtn_table = cluster is lookup, find, match, overloads, elements;

    rep = sequence[tab];
    tab = sequence[_rtn_info];

    % Lookup  _rtn_info in routine table RT for the named routine.
    % (SEP/Nov  7 1984)
    Lookup = proc (RT: cvt, Name: string) returns (_rtn_info)
	       signals (not_found);
	for T: tab in rep$Elements(RT) do
	    L: int := 1;
	    H: int := tab$Size(T);
	    while (L <= H) do                       % Binary search
		M: int := (L + H)/2;
		E: _rtn_info := T[M];
		Tst_Name: string := E.Name;
		if (Name < Tst_Name)
		   then H := M - 1;
		 elseif (Name = Tst_Name)
		   then return(E);
		 else  L := M + 1; end;
		end;
	    end;
	signal Not_Found;
	end Lookup;

    % Find is like Lookup, except that it notices if Name is actually a type
    % and signals is_type if so.
    % (SEP/Nov  7 1984)
    Find = proc (RT: cvt, Name: string) returns (_rtn_info)
	     signals (not_found, is_type);
	for T: tab in rep$Elements(RT) do
	    L: int := 1;
	    H: int := tab$Size(T);
	    while (L <= H) do                       % Binary search
		M: int := (L + H)/2;
		E: _rtn_info := T[M];
		Tst_Name: string := E.Name;
		if (Name < Tst_Name)
		   then if (string$IndexS(Name, Tst_Name) = 1) cand
			   (Tst_Name[string$Size(Name) + 1] = '$')
			   then signal Is_Type;
			   end;
			H := M - 1;
		 elseif (Name = Tst_Name)
		   then return(E);
		 else  L := M + 1; end;
		end;
	    end;
	signal Not_Found;
	end Find;

    % Lookup _rtn_info in table RT given head and tail strings for the name to
    % be matched.
    % (SEP/Nov  7 1984)
    Match = proc (RT: cvt, Head, Tail: string) returns (string)
	      signals (not_found, ambiguous);
	Mod: bool := string$IndexC('$', Head) = 0;
	Off: int := string$Size(Tail) - 1;
	Tot: int := string$Size(Head) + string$Size(Tail);
	It: string := "";
	for T: tab in rep$Elements(RT) do
	    L: int := 1;
	    H: int := tab$Size(T);
	    while (L <= H) do                       % Binary search
		M: int := (L + H)/2;
		E: _rtn_info := T[M];
		Tst_Name: string := E.Name;
		if (Head < Tst_Name)
		   then H := M - 1;
		 elseif (Head = Tst_Name)
		   then L := M;
			break;
		 else  L := M + 1; end;
		end;
	    for L in int$From_To(L, tab$Size(T)) do
		E: _rtn_info := T[L];
		Tst_Name: string := E.Name;
		if (string$IndexS(Head, Tst_Name) ~= 1)
		   then break;
		   end;
		if (Mod)
		   then I: int := string$IndexC('$', Tst_Name)
			if (I > 0)
			   then Tst_Name := string$Substr(Tst_Name, 1, I - 1);
			   end;
		   end;
		if (Off >= 0) cand
		   ((Tot > string$Size(Tst_Name)) cor
		    (_bytevec$IndexV(_Cvt[string, _bytevec](Tail),
				     _Cvt[string, _bytevec](Tst_Name),
				     string$Size(Tst_Name) - Off) = 0))
		   then continue;
		   end;
		if (~ string$Empty(It)) cand (It ~= Tst_Name)
		   then signal Ambiguous;
		   end;
		It := Tst_Name;
		end;
	    end;
	if string$Empty(It)
	   then signal Not_Found;
	   end;
	return(It);
	end Match;

    % The routine table rep is a sequence of sequences of _rtn_info's. Each
    % sequence of _rtn_infos represents a "load" of routines, with the bottom
    % sequence being the most recently loaded routines. This procedure looks
    % through the routine table, making sure that if a routine has been
    % overloaded then only its most recent _rtn_info will be valid. This is
    % intended to be called after a new set of routines is loaded into the
    % debugger environment.
    % (SEP/Nov  7 1984)
    Overloads = proc (RT: cvt);
	NT: tab := rep$Bottom(RT);
	for I: int in int$From_To(2, rep$Size(RT)) do
	    OT: tab := RT[I];
            J: int := 1;
	    while true do
                ORI: _rtn_info := OT[J];
		J := J + 1;
		N: string := ORI.Name;
       	        for NRI: _rtn_info in tab$Elements(NT) do
		    if (NRI.Name = N)
		       then _Handler_Zap(ORI.Raw_Routine, ORI.Code_Size);
			    J := J - 1;
			    _Rtn_Info_Zap (OT, J);
			    break;
                       end;
                    end;
		end
		    except when Bounds: end;
	    end;
	end Overloads;

    % Yield all elements in the routine table (not including old _rtn_info's
    % for routines which have been overloaded).
    % (SEP/Nov  7 1984)
    Elements = iter (RT: cvt) yields (_rtn_info);
	for T: tab in rep$Elements(RT) do
	    for RI: _rtn_info in tab$Elements(T) do
		if (~ _rtn_info$Is_Overloaded(RI))
		   then yield (RI);
		   end;
		end;
	    end;
	end Elements;

    end _rtn_table;
