; Copyright Massachusetts Institute of Technology 1980, 1989

db%code_addr = 24			;; Offset in debug block of code addr.
brkchunk    = 010,,0
brkmask     = -8,,0

strs = ["\000", "\001", "\002", "\003", "\004", "\005", "\006", "\007",
	"\010", "\011", "\012", "\013", "\014", "\015", "\016", "\017",
	"\020", "\021", "\022", "\023", "\024", "\025", "\026", "\027",
	"\030", "\031", "\032", "\033", "\034", "\035", "\036", "\037",
	"\040", "\041", "\042", "\043", "\044", "\045", "\046", "\047",
	"\050", "\051", "\052", "\053", "\054", "\055", "\056", "\057",
	"\060", "\061", "\062", "\063", "\064", "\065", "\066", "\067",
	"\070", "\071", "\072", "\073", "\074", "\075", "\076", "\077",
	"\100", "\101", "\102", "\103", "\104", "\105", "\106", "\107",
	"\110", "\111", "\112", "\113", "\114", "\115", "\116", "\117",
	"\120", "\121", "\122", "\123", "\124", "\125", "\126", "\127",
	"\130", "\131", "\132", "\133", "\134", "\135", "\136", "\137",
	"\140", "\141", "\142", "\143", "\144", "\145", "\146", "\147",
	"\150", "\151", "\152", "\153", "\154", "\155", "\156", "\157",
	"\160", "\161", "\162", "\163", "\164", "\165", "\166", "\167",
	"\170", "\171", "\172", "\173", "\174", "\175", "\176", "\177",
	"\200", "\201", "\202", "\203", "\204", "\205", "\206", "\207",
	"\210", "\211", "\212", "\213", "\214", "\215", "\216", "\217",
	"\220", "\221", "\222", "\223", "\224", "\225", "\226", "\227",
	"\230", "\231", "\232", "\233", "\234", "\235", "\236", "\237",
	"\240", "\241", "\242", "\243", "\244", "\245", "\246", "\247",
	"\250", "\251", "\252", "\253", "\254", "\255", "\256", "\257",
	"\260", "\261", "\262", "\263", "\264", "\265", "\266", "\267",
	"\270", "\271", "\272", "\273", "\274", "\275", "\276", "\277",
	"\300", "\301", "\302", "\303", "\304", "\305", "\306", "\307",
	"\310", "\311", "\312", "\313", "\314", "\315", "\316", "\317",
	"\320", "\321", "\322", "\323", "\324", "\325", "\326", "\327",
	"\330", "\331", "\332", "\333", "\334", "\335", "\336", "\337",
	"\340", "\341", "\342", "\343", "\344", "\345", "\346", "\347",
	"\350", "\351", "\352", "\353", "\354", "\355", "\356", "\357",
	"\360", "\361", "\362", "\363", "\364", "\365", "\366", "\367",
	"\370", "\371", "\372", "\373", "\374", "\375", "\376", "\377"]

;; This is the debugger version of _start. It does everything the non-debug
;; version does, plus initializing the debugger globals: sigtab, rdpipe,
;; wrpipe, rchain, schain, nchain, trcflg, uninit, intflg.

_start = qproc ()
	wvec	sigstk {128}			; signal stack
	wvec	saven { 8 }			; n0-n7 register save
	own	saverr
	own	saver1
	own	saver2
	own	saver3
	own	saver4
	own	savepp

	move	1, numgcs		;; Set number of gcs to CLU 0 anytime
 					;; _start is called (init and reset).

	ifeq	tst	strtab			; first time on TV?
	then	move	strs,strtab		; yes, get made up
		move	sp,environ
		clr	-(sp)
		move	sp,stkhi

		;; Compute and set heaphi and heaplo.
		movea	segmap,rr
		movem	wvccnt(rr),n1/n2 	;; Get size (in bytes) of wvcs
 					;; in n1, start address in n2.
		asr	1,n1		;; de-CLU-inte-ize the size.
		add	n1,n2
		add	32,n2		;; space for sigcontext turd
		move	n2,heaplo
		move	n2,heaphi

		move	heapsz,n3
		;; freecnt = # free bytes in heap (before forced GC)
		ifle	cmpi	010,,0,n3	;; get initial GC point
		then	move	n3,freecnt
			move	n3, gcpoint
		else	move	010,,0,freecnt
			move	010,,0, gcpoint
		end
		add	n2, gcpoint
		add	n2, n3
		move	n3,heapmx	;; set max high end of heap

		move	brkchunk, n3
		ifgt    add	n2, n3      ;; get initial brk addr.
                        cmp     heapmx, n3  ;; which shouldnt' be > heapmx
                then    move    heapmx, n3
                        end
		move	n3, brkaddr

		;; Extend the data space to accommodate the heap.
		move	n3,-(sp)
		clr	-(sp)
		moveq	%brk,n0
		move	n0, -(sp)
		ifcs	trap	0
		then	lea	"not enough core---brk() failed.\n", rr
			bra	odeath
			end
		addq	8,sp			; pop stack

		;; Initialize debugger variables.
		clr	sigtab
		clr	rdpipe
		clr 	wrpipe
		move	rtntab, rchain
		move	segmap, schain
		move 	namtab, nchain

		;; Set up "jump absolute to memlab" instruction at memout
		movew	0047371,memout
		lea	memlab,rr
		move	rr,memloc

		lea	sigstk,r1		; buffer
		lea	512(r1),r2		; signal stack
		move	r2,(r1)
		clr	4(r1)			; not on stack now
		clr	-(sp)
		move	r1,-(sp)
		clr	-(sp)
		moveq	%sigstack,n0		; set it
		move	n0,-(sp)
		trap	0
		moveq	1,n0			; SIG_DFL
		move	n0,(r1)
		clr	8(r1)
		moveq	13,n0			; SIGPIPE
		move	n0,(sp)
		clr	-(sp)
		moveq	%sigvec,n1		; disable
		move	n1,-(sp)
		trap	0
		lea	tquit,r2		; address
		move	r2,(r1)
		subq	1,4(r1)			; mask
		addq	1,8(r1)			; on stack
		moveq	3,n0			; SIGQUIT
		move	n0,4(sp)
		move	n1,-(sp)		; enable
		trap	0
		lea	16(sp),sp		; pop stack

	else	;; Have to zero the stack. Since the stack is unbounded, we
 	 	;; clear until we find a 1K chunk of memory that is all 0's
		;; and assume that the stack has never grown as far as that.
		movea	sp,rr		;; Start from current top-of-stack.
		loop
			movew	1024,n1		; look for 1K contiguous zeros
			qloop
				tst	-(rr)
				dbne	n1,this	;; Exit if (rr) != 0 or after
 					 	;; looping 1024 times.
				end
			beq	next	;; If eq then we've found the 1K chunk and can quit.
			qloop
				clr	(rr)	; clear it
				tst	-(rr)
				bne	this	;; Loop while (rr) != 0.
				end
			end

		end

	;; Initialize n0, r-registers, and pp to 'CLU 0' (i.e., 1)
	moveq	1,n0
	movea	n0,rr
	movea	n0,r1
	movea	n0,r2
	movea	n0,r3
	movea	n0,pp

	clr	defer

	;; Initialize some more debugger variables
	clr	trcflg
	clr	uninit
        clr     intflg
	clr	dbgflg

	movea	stkhi,sp			; initial sp
	movea	sp,ep				; initial ep
	movea	start,r4
	jsr	(r4)				; go to it
	_cleanup_()				; clean up
	_chan$_save_tty()			; clear up tty
	clr	-(sp)
	clr	-(sp)				; hack PC
	moveq	%exit,n0			; done
	move	n0, -(sp)
	trap	0

tquit:	st	intflg				; indicate interrupt
	addq	4,sp
	move	139,(sp)			; cleanup
	trap	0

memlab:	add	n2,freecnt			; restore freecnt
	movem	r1-r4/pp,saver1			; save regs
	movem	n0-n7,saven
	ifge	move	heaphi, n1
		add	n2, n1
		cmp	gcpoint, n1
	then	lea	_gc$gc, r1
		movea	db%code_addr(r1), r1
		jsr	(r1)			        ; call gc (skipping over debug block)
	end
	lea	saven, r1
	move	8(r1), n2		;; get back n2 (allocation request).
	ifgt	move	heaphi, n1	;; extend the brk?
		add	n2, n1
		cmp	brkaddr, n1
	then	add	brkchunk, n1
                and     brkmask, n1             ; compute new break addr.
                ifgt    cmp	heapmx, n1	; which shouldn't be >heapmx.
		then	move	heapmx, n1
		end
		move	n1, brkaddr
		move	n1, -(sp)
		clr	-(sp)
		moveq	%brk, n0
		move	n0, -(sp)
		ifcs	trap	0
		then	lea	"not enough core --- brk() failed.\n", rr
			bra	odeath
			end
		addq	8, sp
		ifgt	cmp	gcpoint, n1
		then	move	gcpoint, n1
		end
		sub	heaphi, n1
		move	n1, freecnt
	end
		
	movem	saver1,r1-r4/pp			; restore regs
	movem	saven,n0-n7
	clr	saver1
	clr	saver2
	clr	saver3
	clr	saver4
	clr	savepp
	movea	heaphi,rr
	ifge	sub	n2,freecnt		; room?
	then	rts				; yes, return
	end
	adda	n2,rr				; really room?
	ifle	cmpa	heapmx,rr
	then	suba	n2,rr			; yes
		clr	freecnt
		rts				; return
	end
	add	n2,freecnt			; restore freecnt
death:	_chan$_save_tty()
	lea	"heap exhausted!\n",rr
odeath:	move	(rr),n2
	asr	1,n2
	move	n2,-(sp)			; byte count
	pea	4(rr)				; chars
	moveq	2,n1
	move	n1,-(sp)			; file desc
	clr	-(sp)
	moveq	%write,n0
	move	n0, -(sp)
	trap	0
	movew	15,6(sp)
	moveq	%exit,n0
	move	n0, -(sp)
	trap	0
	end _start


_quit_interrupt = qproc ()
	;; Save registers. N-registers are saved in halves because they
	;; may not be valid refs.
	clr	-(sp)			;; Push low word of data registers.
	movew	n7, 2(sp)
	clr	-(sp)
	movew	n6, 2(sp)
	clr	-(sp)
	movew	n5, 2(sp)
	clr	-(sp)
	movew	n4, 2(sp)
	clr	-(sp)
	movew	n3, 2(sp)
	clr	-(sp)
	movew	n2, 2(sp)
	clr	-(sp)
	movew	n1, 2(sp)
	clr	-(sp)
	movew	n0, 2(sp)
	movem	rr/r1-r4/pp, -(sp)	;; Push address registers.
	swap	n7			;; Push high word of data registers.
	swap	n6
	swap	n5
	swap	n4
	swap	n3
	swap	n2
	swap	n1
	swap	n0
	clr	-(sp)
	movew	n7, 2(sp)
	clr	-(sp)
	movew	n6, 2(sp)
	clr	-(sp)
	movew	n5, 2(sp)
	clr	-(sp)
	movew	n4, 2(sp)
	clr	-(sp)
	movew	n3, 2(sp)
	clr	-(sp)
	movew	n2, 2(sp)
	clr	-(sp)
	movew	n1, 2(sp)
	clr	-(sp)
	movew	n0, 2(sp)

	movea	88(sp), r1		;; Get return PC (skip over saved regs).
	;; We want to find the start of the JSR instruction preceding the
	;; one that the return PC points to. The JSR address could be an
	;; absolute longword address (routine), an indirection off a 
        ;; register---possibly with an offset, or a register indirection with
	;; index.
	if	cmpiw	047271, -6(r1)	;; JSR to abs.L address?
		bne	this
		movea	-4(r1), rr	;; Yes, to routine?
		move	ep, -(sp)	;; Build a frame and call
		movea	sp, ep		;; _obj$is_routine to find out.
		clr	intflg
		move	trcflg, -(sp)	;; Enter system
		move	dbgflg, trcflg
		_obj$is_routine (rr)
		move	(sp)+, trcflg
		movea	ep, sp
		movea	(sp)+, ep	;; Pop frame.
		movea	88(sp), r1	;; Get back return PC.
		move	rr, n7		;; Check results of call.
		beq	this		;; Not a routine. Try to find JSR instr again.
		suba	6, r1		;; Is a routine. Make r1 point to instr.
		bra	next
	then	qloop
			suba	2, r1
			cmpib	0116, (r1)	;; JSR?
			bne	this
			movea	r1, r2
			moveb	1(r2), n1	;; Get 2nd byte
			andib	0370, n1;; Mask to look at top 5 bits only
			ifeq	cmpib	0250, n1	;; JSR d(An)?
			then	adda	4, r2
				bra	check
			elfeq	cmpib	0220, n1	;; JSR (An)?
			then	adda	2, r2
				bra	check
			elfeq	cmpib	0260, n1	;; JSR d(An, Xi)?
			then	adda	4, r2
				bra	check
			else	bra	this
				end
check:			cmpa	88(sp), r2	;; r2 should be pointing at return PC.
			bne	this
			end
		end

	;; Use (JSB addr) + 1 to avoid being at end of for loop if iter call.
	move	r1, -(sp)		;; Build our frame.
	addqb	1, 3(sp)
	move	ep, -(sp)
	movea	sp, ep
	clr	intflg
	move	trcflg, -(sp)		;; Enter system.
	move	dbgflg, trcflg
	stream$primary_output()
	move	rr, -(sp)
	stream$putc_image (rr, '\007')
	stream$puts (*, "\ninterrupt...")
	stream$primary_input ()
	_listen (rr)			;; Enter listen loop.
	move	(sp)+, trcflg
	movea	ep, sp			;; Pop our frame.
	movea	(sp)+, ep
	move	(sp)+, 88(sp)		;; Restore recomputed return address.
	movem	(sp)+, n0-n7/rr/r1-r4/pp;; Restore registers.
	swap	n0
	swap	n1
	swap	n2
	swap	n3
	swap	n4
	swap	n5
	swap	n6
	swap	n7
	or	(sp)+, n0
	or	(sp)+, n1
	or	(sp)+, n2
	or	(sp)+, n3
	or	(sp)+, n4
	or	(sp)+, n5
	or	(sp)+, n6
	or	(sp)+, n7
	subqb	1, 3(sp)		;; Readjust return addr.
	rts
	end	_quit_interrupt
