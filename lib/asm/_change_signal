;; Copyright Massachusetts Institute of Technology 1985, 1989

sv%handler	= 0
sv%mask 	= 4
sv%onstack 	= 8

_change_signal = proc (sig: int, label: int) returns (int)
						signals (not_possible(string))
	wvec	vec	{3}
	wvec	ovec	{3}

	lea	vec, r1			;; Get pointer to vec buffer.
	move	label, n1
	asr	1, n1			;; De-integerize label.	
	move	n1, sv%handler(r1)	;; Fill in vec. Put in handler.
	move	#ff7b,,#f0e0, sv%mask(r1)	;; Put in mask.
	move	n0, sv%onstack(r1)	;; Use signal stack = true.
	move	sig, n1
	asr	1, n1			;; De-integerize signal number.
	pea	ovec			;; Push addr of ovec buffer.
	pea	vec			;; Push addr of vec buffer.
	move	n1, -(sp)		;; Push signal number
	clr	-(sp)			;; Hack pc.
	moveq	%sigvec, n0
	move	n0, -(sp)
	trap	0			;; Do the call.
	scc	n1
	addq	4, sp			;; Pop pc.
	clr	(sp)+			;; Pop args.
	clr	(sp)+
	clr	(sp)+
	ifne	tstb	n1
	then	moveq	1, n0		;; Restore n0.
		lea	ovec, r1
		movea	sv%handler(r1), rr	;; Get old label.
		movea	n0, r1		;; Make r1 a valid ref.
		lea	1(rr, rr), rr	;; Integerize label.
		return (rr)		;; And return it.
		end
	movea	n0, rr
	lea	1(rr,rr), rr		;; Save and integerize error code.
	moveq	1, n0			;; Restore n0.
	movea	n0, r1			;; Make r1 a valid ref.
	_erstr(rr)
	signal	not_possible(rr)
	end _change_signal
