; Copyright Massachusetts Institute of Technology 1980,, 1989

strs = ["\000", "\001", "\002", "\003", "\004", "\005", "\006", "\007",
	"\010", "\011", "\012", "\013", "\014", "\015", "\016", "\017",
	"\020", "\021", "\022", "\023", "\024", "\025", "\026", "\027",
	"\030", "\031", "\032", "\033", "\034", "\035", "\036", "\037",
	"\040", "\041", "\042", "\043", "\044", "\045", "\046", "\047",
	"\050", "\051", "\052", "\053", "\054", "\055", "\056", "\057",
	"\060", "\061", "\062", "\063", "\064", "\065", "\066", "\067",
	"\070", "\071", "\072", "\073", "\074", "\075", "\076", "\077",
	"\100", "\101", "\102", "\103", "\104", "\105", "\106", "\107",
	"\110", "\111", "\112", "\113", "\114", "\115", "\116", "\117",
	"\120", "\121", "\122", "\123", "\124", "\125", "\126", "\127",
	"\130", "\131", "\132", "\133", "\134", "\135", "\136", "\137",
	"\140", "\141", "\142", "\143", "\144", "\145", "\146", "\147",
	"\150", "\151", "\152", "\153", "\154", "\155", "\156", "\157",
	"\160", "\161", "\162", "\163", "\164", "\165", "\166", "\167",
	"\170", "\171", "\172", "\173", "\174", "\175", "\176", "\177",
	"\200", "\201", "\202", "\203", "\204", "\205", "\206", "\207",
	"\210", "\211", "\212", "\213", "\214", "\215", "\216", "\217",
	"\220", "\221", "\222", "\223", "\224", "\225", "\226", "\227",
	"\230", "\231", "\232", "\233", "\234", "\235", "\236", "\237",
	"\240", "\241", "\242", "\243", "\244", "\245", "\246", "\247",
	"\250", "\251", "\252", "\253", "\254", "\255", "\256", "\257",
	"\260", "\261", "\262", "\263", "\264", "\265", "\266", "\267",
	"\270", "\271", "\272", "\273", "\274", "\275", "\276", "\277",
	"\300", "\301", "\302", "\303", "\304", "\305", "\306", "\307",
	"\310", "\311", "\312", "\313", "\314", "\315", "\316", "\317",
	"\320", "\321", "\322", "\323", "\324", "\325", "\326", "\327",
	"\330", "\331", "\332", "\333", "\334", "\335", "\336", "\337",
	"\340", "\341", "\342", "\343", "\344", "\345", "\346", "\347",
	"\350", "\351", "\352", "\353", "\354", "\355", "\356", "\357",
	"\360", "\361", "\362", "\363", "\364", "\365", "\366", "\367",
	"\370", "\371", "\372", "\373", "\374", "\375", "\376", "\377"]

brkchunk	= 010,,0
brkmask 	= -8,,0

_start = qproc ()
	wvec	sigstk {128}			; signal stack
	wvec	saven {8}			; n0-n7 register save
	own	init				; init flag
	own	saverr
	own	saver1
	own	saver2
	own	saver3
	own	saver4
	own	savepp

	ifeq	tstb	init			; first time on TV?
	then	subqb	1,init			; yes, get made up
		addq	1,numgcs
		move	strs,strtab
		move	sp,environ
		clr	-(sp)
		move	sp,stkhi
		movea	segmap,rr
		movem	wvccnt(rr),n1/n2
		asr	1,n1
		add	n1,n2
		add	32,n2			; space for sigcontext turd
		move	n2,heaplo
		move	n2,heaphi
		move	heapsz,n3
		ifle	cmpi	010,,0,n3	; get initial GC point
		then	move	n3,freecnt
			move	n3, gcpoint
		else	move	010,,0,freecnt
			move	010,,0, gcpoint
		end
		add	n2, gcpoint
		add	n2,n3
		move	n3,heapmx
		move	brkchunk, n3
		ifgt    add	n2, n3		;; get initial brk address.
		        cmp     heapmx, n3      ;; which shoudn't be > heapmx
	        then    move    heapmx, n3
		        end
		move	n3, brkaddr
		move	n3,-(sp)
		clr	-(sp)
		moveq	%brk,n0			; extend data space
		move	n0,-(sp)
		ifcs	trap	0
		then	lea	"not enough core---brk() failed.\n", rr
			bra	odeath
			end
		addq	8,sp			; pop stack
		movew	0047371,memout
		lea	memlab,rr
		move	rr,memloc
		lea	sigstk,r1		; buffer
		lea	512(r1),r2		; signal stack
		move	r2,(r1)
		clr	4(r1)			; not on stack now
		clr	-(sp)
		move	r1,-(sp)
		clr	-(sp)
		moveq	%sigstack,n0		; set it
		move	n0,-(sp)
		trap	0
		moveq	1,n0			; SIG_DFL
		move	n0,(r1)
		clr	8(r1)
		moveq	13,n0			; SIGPIPE
		move	n0,(sp)
		clr	-(sp)
		moveq	%sigvec,n0		; disable
		move	n0,-(sp)
		trap	0
		lea	16(sp),sp		; pop stack
	end
	moveq	1,n0
	movea	n0,rr
	movea	n0,r1
	movea	n0,r2
	movea	n0,r3
	movea	n0,pp
	clr	defer
	movea	stkhi,sp			; initial sp
	movea	sp,ep				; initial ep
	movea	start,r4
	jsr	(r4)				; go to it
	_cleanup_()				; clean up
	_chan$_save_tty()			; clear up tty
	clr	-(sp)
	clr	-(sp)				; hack PC
	moveq	%exit,n0			; done
	move	n0,-(sp)
	trap	0

memlab:	add	n2,freecnt			; restore freecnt
        movem	r1-r4/pp,saver1			; save regs
       	movem	n0-n7,saven
        ifge    move    heaphi, n1
	        add     n2, n1
		cmp     gcpoint, n1
	then    jsr	_gc$gc				; call gc
	end
	lea	saven, r1
	move	8(r1), n2		;; get back n2 (allocation request).
        ifgt    move    heaphi, n1		; extend the brk?
	        add     n2, n1
		cmp     brkaddr, n1
        then    add     brkchunk, n1
                and     brkmask, n1             ; compute new break addr.
                ifgt    cmp	heapmx, n1	; which shouldn't be >heapmx.
		then	move	heapmx, n1
		end
		move	n1, brkaddr
		move	n1, -(sp)
		clr	-(sp)
		moveq	%brk, n0
		move	n0, -(sp)
		ifcs	trap	0
		then	lea	"not enough core --- brk() failed.\n", rr
			bra	odeath
			end
		addq	8, sp
		ifgt	cmp	gcpoint, n1
		then	move	gcpoint, n1
		end
		sub	heaphi, n1
		move	n1, freecnt
	end
		
        movem	saver1,r1-r4/pp			; restore regs
        movem	saven,n0-n7
        clr	saver1
        clr	saver2
        clr	saver3
        clr	saver4
        clr	savepp
	movea	heaphi,rr
	ifge	sub	n2,freecnt		; room?
	then	rts				; yes, return
	end
	adda	n2,rr				; really room?
	ifle	cmpa	heapmx,rr
	then	suba	n2,rr			; yes
		clr	freecnt
		rts				; return
	end
	add	n2,freecnt			; restore freecnt
death:	_chan$_save_tty()
	lea	"heap exhausted!\n",rr
odeath:	move	(rr),n2
	asr	1,n2
	move	n2,-(sp)			; byte count
	pea	4(rr)				; chars
	moveq	2,n1
	move	n1,-(sp)			; file desc
	clr	-(sp)
	moveq	%write,n0
	move	n0,-(sp)
	trap	0
	movew	15,6(sp)
	moveq	%exit,n0
	move	n0,-(sp)
	trap	0
	end _start
