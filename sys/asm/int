; Copyright Massachusetts Institute of Technology 1980, 1989

int = cluster is add, sub, mul, minus, div, power, mod, abs, min, max,
		 from_to_by, from_to, parse, unparse, lt, le, ge, gt,
		 equal, similar, copy, print, encode, decode, _gcd

; integer i is represented as 2*i+1

add = qproc (i1, i2: cvt) returns (cvt) signals (overflow)
	move	rr,n1
	subqb	1,n1
	ifvc	add	i1,n1
	then	return(n1)
	end
	signal	overflow
	end add

sub = qproc (i1, i2: cvt) returns (cvt) signals (overflow)
	move	i1,n1
	ifvc	sub	rr,n1
	then	addqb	1,n1
		return(n1)
	end
	signal	overflow
	end sub

mul = qproc (i1, i2: cvt) returns (cvt) signals (overflow)
	move	i1,n5
	move	n5,n7
	iflt	asr	1,n5
	then	neg	n5		; get abs
	end
	move	rr,n1
	iflt	asr	1,n1
	then	neg	n1		; get abs
	end
	swap	n1
	ifne	tstw	n1		; 16 bits?
	then	swap	n1		; no, swap args
		exg	n1,n5
		swap	n1
		tstw	n1		; 16 bits?
		bne	oflow
	end
	swap	n1
	move	n5,n3			; save low part
	swap	n3
	ifne	ext	n3		; 16 bits?
	then	mulu	n1,n3		; no, do high part
		swap	n3
		blt	oflow
		tstw	n3		; 16 bits?
		bne	oflow
	end
	mulu	n1,n5			; do low part
	blt	oflow
	add	n3,n5			; add in high part
	bvs	oflow
	move	rr,n1
	iflt	eor	n1,n7		; negative?
	then	neg	n5		; yes, correct sign
	end
	add	n5,n5
	bvs	oflow
	addqb	1,n5
	return(n5)
oflow:	signal	overflow
	end mul

minus = qproc (i: cvt) returns (cvt) signals (overflow)
	move	rr,n1
	neg	n1
	ifvc	addq	2,n1
	then	return(n1)
	end
	signal	overflow
	end minus

div = qproc (num, den: cvt) returns (cvt) signals (zero_divide, overflow)
	move	rr,n1
	ifeq	asr	1,n1				; check for zero divide
	then	signal	zero_divide
	end
	iflt
	then	neg	n1				; get abs
	end
	move	num,n3
	iflt	asr	1,n3
	then	neg	n3				; get abs
		add	n1,n3				; correct
		subq	1,n3
	end
	moveq	0,n2					; will get quotient
	cmp	n1,n3
	blt	fixup					; zero quotient?
	swap	n1
	ifeq	tstw	n1				; 16 bits?
	then	ifhi	cmp	n3,n1			; yes, 16 bit quotient?
		then	swap	n1			; yes
			divu	n1,n3			; get it
			movew	n3,n2
fixup:			ifgt	move	num,n4		; num >= 0 ?
			then	iflt	move	rr,n1	; yes, den < 0 ?
				then	neg	n2	; yes, negate
				end
				add	n2,n2
				addqb	1,n2
				return(n2)
			end
			ifgt	cmpa	n0,rr		; den > 0 ?
			then	neg	n2		; yes, negate
			end
			add	n2,n2
			bvs	oflow
			addqb	1,n2
			return(n2)
		end
		swap	n1
		swap	n3				; separate parts
		movew	n3,n2
		swap	n3
		divu	n1,n2				; divide high part
		move	n2,n4				; save high quotient
		movew	n3,n2				; move in low part
		divu	n1,n2				; divide low part
		swap	n2				; get in high quotient
		movew	n4,n2
		swap	n2
		bra	fixup
	end
	swap	n1
	movew	n3,n2					; separate parts
	swap	n2
	swap	n3
	ext	n3
	moveq	15,n4					; 16 times
	qloop
		add	n2,n2				; shift
		addx	n3,n3
		sub	n1,n3				; subtract
		blt	ltzero				; divides in?
gezero:		addq	1,n2				; yes, set bit
		subqw	1,n4				; count down
		bge	this				; loop
	end
	bra	fixup
	qloop
		add	n2,n2				; shift
		addx	n3,n3
		add	n1,n3				; add back
		bge	gezero				; until restored
ltzero:		subqw	1,n4				; count down
		bge	this				; loop
	end
	bra	fixup
oflow:	signal	overflow
	end div

power = qproc (i, exp: cvt) returns (cvt) signals (negative_exponent, overflow)
	move	rr,n5
	ifle	asr	1,n5
	then	iflt
		then	signal	negative_exponent
		end
		return(1)
	end
	move	i,n3
	ifle	asr	1,n3
	then	ifeq
		then	return(n0)
		end
		neg	n3				; get abs
	end
	moveq	1,n1					; start with 1
	moveq	0,n2
	ifcs	asr	1,n5				; odd power?
	then	ifeq					; yes, power = 1?
		then	return(i)			; yes
		end
		move	n3,n1				; no, start with i
		not	n2
	end
	qloop
		swap	n3
		tstw	n3				; 16 bits?
		bne	oflow
		swap	n3
		mulu	n3,n3				; square
		blt	oflow
		ifcc	asr	1,n5			; include this power?
		then	bne	this			; no, count down powers
			break
		end
		move	n3,n4
		swap	n4
		ifne	tstw	n4			; 16 bits?
		then	swap	n4			; no, swap args
			exg	n1,n4
			swap	n4
			tstw	n4			; 16 bits?
			bne	oflow
		end
		swap	n4
		move	n1,n7				; save low part
		swap	n7
		ifne	ext	n7			; 16 bits?
		then	mulu	n4,n7			; no, do high part
			swap	n7
			blt	oflow
			tstw	n7			; 16 bits?
			bne	oflow
		end
		mulu	n4,n1				; do low part
		blt	oflow
		add	n7,n1				; add in high part
		bvs	oflow
		not	n2
		move	n5,n5
		bne	this				; count down powers
	end
	iflt	and	i,n2				; negative result?
	then	neg	n1
	end
	add	n1,n1
	bvs	oflow
	addqb	1,n1
	return(n1)
oflow:	signal	overflow
	end power

mod = qproc (i, base: cvt) returns (cvt) signals (zero_divide, overflow)
	move	rr,n1
	ifeq	asr	1,n1				; check for zero divide
	then	signal	zero_divide
	end
	iflt
	then	neg	n1				; get abs
	end
	move	i,n3
	iflt	asr	1,n3
	then	neg	n3				; get abs
	end
	moveq	0,n2					; will get quotient
	cmp	n1,n3
	blt	fixup					; zero quotient?
	swap	n1
	ifeq	tstw	n1				; 16 bits?
	then	ifhi	cmp	n3,n1			; yes, 16 bit quotient?
		then	swap	n1			; yes
			divu	n1,n3			; get it
			movew	n3,n2
			swap	n3			; remainder in n3
			ext	n3
fixup:			ifgt	move	i,n4		; i >= 0 ?
			then	add	n3,n3		; yes, no fixup
				addqb	1,n3
				return(n3)
			end
			ifne	tst	n3		; remainder > 0 ?
			then	sub	n3,n1		; yes, correct
				add	n1,n1
				addqb	1,n1
				return(n1)
			end
			ifvc	move	rr,n1		; base < 0 ?
				bgt	this
				add	n2,n2		; quotient in range ?
			then	return(n0)
			end
			signal	overflow
		end
		swap	n1
		swap	n3				; separate parts
		movew	n3,n2
		swap	n3
		divu	n1,n2				; divide high part
		move	n2,n4				; save high quotient
		movew	n3,n2				; move in low part
		divu	n1,n2				; divide low part
		swap	n2
		moveq	0,n3				; get remainder
		movew	n2,n3
		movew	n4,n2				; get in high quotient
		swap	n2
		bra	fixup
	end
	swap	n1
	movew	n3,n2					; separate parts
	swap	n2
	swap	n3
	ext	n3
	moveq	15,n4					; 16 times
	qloop
		add	n2,n2				; shift
		addx	n3,n3
		sub	n1,n3				; subtract
		blt	ltzero				; divides in?
gezero:		addq	1,n2				; yes, set bit
		subqw	1,n4				; count down
		bge	this				; loop
	end
	bra	fixup
	qloop
		add	n2,n2				; shift
		addx	n3,n3
		add	n1,n3				; add back
		bge	gezero				; until restored
ltzero:		subqw	1,n4				; count down
		bge	this				; loop
	end
	add	n1,n3					; fix remainder
	bra	fixup
	end mod

abs = qproc (i: cvt) returns (cvt) signals (overflow)
	if	move	rr,n1
		bge	this
		neg	n1
		addq	2,n1
		bvs	next
		movea	n1,rr
	then	return(rr)
	end
	signal	overflow
	end abs

min = qproc (i1, i2: cvt) returns (cvt)
	ifgt	cmpa	i1,rr
	then	movea	i1,rr
	end
	return(rr)
	end min

max = qproc (i1, i2: cvt) returns (cvt)
	iflt	cmpa	i1,rr
	then	movea	i1,rr
	end
	return(rr)
	end max

from_to_by = iter (from, to, by: cvt) yields (cvt)
	move	from,n1
	ifge	move	rr,n7
	then	qloop
			cmp	to,n1
			bgt	next
			move	n1,from
			yield(n1)
			move	from,n1
			subqb	1,n1
			add	by,n1
			bvc	this
		end
	else	qloop
			cmp	to,n1
			blt	next
			move	n1,from
			yield(n1)
			move	from,n1
			subqb	1,n1
			add	by,n1
			bvc	this
		end
	end
	end from_to_by

from_to = iter (from, to: cvt) yields (cvt)
	qloop
		movea	from,rr
		cmpa	to,rr
		bgt	next
		yield(rr)
		addq	2,from
		bvc	this
	end
	end from_to

parse = qproc (s: string) returns (cvt) signals (bad_format, overflow)
	move	(rr)+,n1		; get char count
	asr	1,n1			; check for empty string
	beq	badfmt
	add	rr,n1
	moveq	0,n2			; clear to accumulate sum
	moveq	0,n3			; clear to get each char
	moveb	(rr)+,n3		; get first char
	move	n3,n5			; save for check at end
	ifeq	cmpib	'-',n3
		beq	this
		cmpib	'+',n3
	then	cmp	rr,n1		; must be more chars
		beq	badfmt
getchr:		moveq	0,n3		; get next one
		moveb	(rr)+,n3
	end
	subiw	'0',n3
	blt	badfmt			; check range
	cmpiw	9,n3
	bgt	badfmt
	move	n2,n4
	asl	3,n2			; times 8
	bvs	oflow
	add	n4,n4			; times 2
	add	n4,n2			; add together
	bvs	oflow
	add	n3,n2			; add digit
	bvs	oflow
	cmp	rr,n1			; end of string?
	bne	getchr
	ifeq	cmpib	'-',n5		; negative?
	then	neg	n2		; yes, negate sum
	end
	add	n2,n2
	bvs	oflow
	addqb	1,n2
	movea	n2,rr
	return(rr)
oflow:	movea	n0,rr
	signal overflow
badfmt:	movea	n0,rr
	signal bad_format
	end parse

unparse = qproc (i: cvt) returns (string)
	move	rr,n1
	iflt	asr	1,n1		; negative?
	then	neg	n1		; yes, get magnitude
	elfle	cmpi	9,n1		; single char?
	then	addib	'0',n1		; yes
		aslw	2,n1
		movea	strtab,rr
		movea	4(rr,n1),rr
		return(rr)
	end
	moveq	1,n2			; set up count
	moveq	10,n4
	loop
		swap	n1
		cmpw	n4,n1		; single divide?
		blt	next
		moveq	0,n3		; no
		movew	n1,n3
		divu	n4,n3		; divide high part
		movew	n3,n1
		swap	n1
		movew	n1,n3
		divu	n4,n3		; divide low part
		movew	n3,n1
		swap	n3
		ext	n3
		addib	'0',n3		; make it a char
		move	n3,-(sp)	; push it
		addqw	2,n2		; count char
	end
	swap	n1
	qloop
		divu	n4,n1		; get next digit
		moveq	0,n3
		movew	n1,n3
		swap	n1
		ext	n1
		addib	'0',n1		; make it a char
		move	n1,-(sp)	; push it
		addqw	2,n2		; count chars
		move	n3,n1
		bne	this		; until zero
	end
	ifle	move	rr,n1		; negative?
	then	move	'-',-(sp)	; yes, push sign
		addqw	2,n2		; count char
	end
	move	n2,n1			; get header
	asrw	1,n2			; get byte count
	move	n2,n3
	addqw	7,n2
	andib	-4,n2
	movea	heaphi,rr		; alloc
	iflt	sub	n2,freecnt
	then	jsr	memout
	end
	add	n2,heaphi
	move	n1,(rr)
	movea	rr,r1
	move	(r1)+,n1		; get back count
	add	r1,n3
	qloop
		move	(sp)+,n2	; pop off a char
		moveb	n2,(r1)+	; deposit it
		cmp	r1,n3
		bne	this		; count and branch
	end
	movea	n0,r1
	return(rr)
	end unparse

lt = qproc (i1, i2: cvt) returns (bool)
	moveq	0,n1
	cmpa	i1,rr
	sgt	n1
	return(n1)
	end lt

le = qproc (i1, i2: cvt) returns (bool)
	moveq	0,n1
	cmpa	i1,rr
	sge	n1
	return(n1)
	end le

ge = qproc (i1, i2: cvt) returns (bool)
	moveq	0,n1
	cmpa	i1,rr
	sle	n1
	return(n1)
	end ge

gt = qproc (i1, i2: cvt) returns (bool)
	moveq	0,n1
	cmpa	i1,rr
	slt	n1
	return(n1)
	end gt

equal = qproc (i1, i2: cvt) returns (bool)
	moveq	0,n1
	cmpa	i1,rr
	seq	n1
	return(n1)
	end equal

similar = qproc (i1, i2: cvt) returns (bool)
	moveq	0,n1
	cmpa	i1,rr
	seq	n1
	return(n1)
	end similar

copy = qproc (i: cvt) returns (cvt)
	return(rr)
	end copy

print = proc (i: cvt, pst: pstream)
	int$unparse(i)
	pstream$text(pst, rr)
	end print

encode = proc (i: cvt, ist: istream) signals (not_possible(string))
	istream$%puti(rr, i)
		resignal not_possible
	end encode

decode = proc (ist: stream) returns (cvt)
				signals (end_of_file, not_possible(string))
	istream$%geti(rr)
		resignal end_of_file, not_possible
	return (rr)
	end decode

_gcd = qproc (i: cvt, tab: gcd_tab) returns (int)
	return(0)
	end _gcd

end int
