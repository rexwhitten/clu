%	GEXPR CLU
% Copyright Massachusetts Institute of Technology 1980,, 1989
%	CLU Compiler Version 3: expression generator

# extend

cor_ = true
cand_ = false

g_expr = proc (e: g_env, x: expr, dest: locate)
	tagcase x.abs
	   tag idn (id: idn):
		g_move_idn(e, dest, id, x)
		return
	   tag any_ (xa: expr):
		g_anyize(e, xa)
	   tag cand_ (xa: condop):
		if e.either
		   then g_bcons(e, g_test_cond(e, qi$[], xa, true, false), dest)
			return
		   end
		g_condop(e, xa, cand_)
	   tag cor_ (xa: condop):
		if e.either
		   then g_bcons(e, g_test_cond(e, qi$[], xa, true, true), dest)
			return
		   end
		g_condop(e, xa, cor_)
	   tag invoke (inv: invoke):
		if is_const_expr(x)
		   then g_const_expr(e, x, dest)
			return
		elseif e.time
		   then tagcase inv.apply.abs
			   tag op (cop: clusterop):
				if g_op_invoke(e, cop, inv.args, dest)
				   then return end
			   tag apply (clut: clutype):
				if ~exprlist$empty(clut.parms)  cand
				   clut.gen.unique = "_cvt"
				   then g_expr(e, exprlist$bottom(inv.args), dest)
					return
				   end
			   tag force_ (t: typespec):
				g_force_op(e, t, inv.args, dest)
				return
			   others:
			   end
		end
		g_invoke2(e, g_invoke1(e, inv))
	   tag a_cons (xa: arraycons):
		if is_const_expr(x)
		   then g_const_expr(e, x, dest)
			return
		   end
		g_arraycons(e, xa)
	   tag s_cons (xa: selectcons):
		if is_const_expr(x)
		   then g_const_expr(e, x, dest)
			return
		   end
		g_selectcons(e, xa)
	   tag apply, op:
		g_routine(e, x, dest)
		return
	   tag force_ (xa: typespec):
		x := expr$create(exprabs$make_type_(xa), e.tenv.type_type)
		x := expr$create(exprabs$make_apply(clutype${gen:   e.force_,
							     parms: exprlist$[x]}),
				 e.tenv.unknown_type)
		g_routine(e, x, dest)
		return
	   tag up_, down_ (xa: expr):
		g_expr(e, xa, dest)
		return
	   tag type_of_ (xa: expr):
		g_invoke2(e, g_invoke1(e, invoke${apply: e.type_of_,
						  args:  exprlist$[xa]}))
	   others:
		g_const_expr(e, x, dest)
		return
	   end
	g_move_src(e, dest, _addrd_RR, 0)
	end g_expr

g_move_idn = proc (e: g_env, dest: locate, id: idn, x: expr)
	me: g_menv := e.menv
	regs: reglist := me.state
	found: bool, src: int := g_find_idn(regs, id.val)
	if found
	   then g_move_src(e, dest, src, 0)
	   else disp: int
		src, disp := g_idn_src(e, id, x)
		tagcase dest
		   tag areg (num: int):
			ainst(me, MOVEA, num, src)
			if disp ~= 0
			   then if src = _long
				   then udesc(me, disp)
				   else immed(me, disp)
				   end
			   end
			regs[_addrd + num] := id.val
		   tag dreg (num: int):
			minst(me, MOVE, num * 010, src)
			if disp ~= 0
			   then if src = _long
				   then udesc(me, disp)
				   else immed(me, disp)
				   end
			   end
			if num ~= _datad_N7 then regs[num] := id.val end
		   others:
			g_move_src(e, dest, src, disp)
		   end
	   end
	end g_move_idn

g_idn_src = proc (e: g_env, id: idn, x: expr) returns (int, int)
	tagcase id.val
	   tag rparm, cparm:
		te: g_tenv := e.tenv
		val: mref, pflag: int := g_tenv$store_const(te, x)
		disp: int := g_tenv$add_puse(te, _use_const, val)
		g_pp_set(e.menv, -1, locate$make_a(nil))
		if disp = 0
		   then return(_indir_PP, 0)
		   else return(_idisp_PP, disp * 4)
		   end
	   tag var (num: int):
		return(_idisp_EP, num)
	   tag rown (num: mref):
		return(_long, g_tenv$add_use(e.tenv, _use_rown, num))
	   tag cown (num: mref):
		return(_long, g_tenv$add_use(e.tenv, _use_cown, num))
	   tag prown (num: mref):
		return(g_pp_set(e.menv,
				g_tenv$add_puse(e.tenv, _use_rown, num),
				id.val),
		       0)
	   tag pcown (num: mref):
		return(g_pp_set(e.menv,
				g_tenv$add_puse(e.tenv, _use_cown, num),
				id.val),
		       0)
	   others:
	   end
	end g_idn_src

g_move_src = proc (e: g_env, dest: locate, src, sdisp: int)
	me: g_menv := e.menv
	regs: reglist := me.state
	dst, ddisp: int
	areg: bool := false
	dreg: bool := false
	tagcase dest
	   tag areg (num: int):
		dst := num
		ddisp := 0
		areg := true
		num := _addrd + num
		if src < _datad_N1  cor  src > _addrd_R3
		   then regs[num] := locate$make_a(nil)
		elseif src = num
		   then return
		else regs[num] := regs[src] end
	   tag dreg (num: int):
		dreg := true
		dst := num
		ddisp := 0
		if src < _datad_N1  cor  src > _addrd_R3
		   then regs[num] := locate$make_a(nil)
		elseif src = num
		   then return
		elseif src ~= _datad_N7
		   then regs[num] := regs[src]
		end
	   tag tos:
		dst := pdecr_SP_
		ddisp := 0
	   tag var (num: int):
		dst := idisp_EP_
		ddisp := num
		if src >= _datad_N1  cand  src <= _addrd_R3
		   then g_update_state(regs, src, dest)
		   else g_update_state(regs, -1, dest)
		   end
	   tag rown (num: mref):
		dst := long_
		ddisp := g_tenv$add_use(e.tenv, _use_rown, num)
		if src >= _datad_N1  cand  src <= _addrd_R3
		   then g_update_state(regs, src, dest)
		   else g_update_state(regs, -1, dest)
		   end
	   tag cown (num: mref):
		dst := long_
		ddisp := g_tenv$add_use(e.tenv, _use_cown, num)
		if src >= _datad_N1  cand  src <= _addrd_R3
		   then g_update_state(regs, src, dest)
		   else g_update_state(regs, -1, dest)
		   end
	   tag prown (num: mref):
		ddisp := g_tenv$add_puse(e.tenv, _use_rown, num)
		if src = _indir_R4
		   then g_pp_set(me, -1, locate$make_a(nil))
			if ddisp = 0
			   then ainst(me, MOVEA, _R3, _indir_PP)
			   else ainst(me, MOVEA, _R3, _idisp_PP)
				immed(me, ddisp * 4)
			   end
			dst := indir_R3_
			regs[_addrd_R3] := dest
			g_update_state(regs, -1, dest)
		   else diff = indir_ - _indir * 010
			dst := g_pp_set(me, ddisp, dest) * 010 + diff
			if src >= _datad_N1  cand  src <= _addrd_R3
			   then g_update_state(regs, src, dest)
			   else g_update_state(regs, -1, dest)
			   end
		   end
		ddisp := 0
	   tag pcown (num: mref):
		ddisp := g_tenv$add_puse(e.tenv, _use_cown, num)
		if src = _indir_R4
		   then g_pp_set(me, -1, locate$make_a(nil))
			if ddisp = 0
			   then ainst(me, MOVEA, _R3, _indir_PP)
			   else ainst(me, MOVEA, _R3, _idisp_PP)
				immed(me, ddisp * 4)
			   end
			dst := indir_R3_
			regs[_addrd_R3] := dest
			g_update_state(regs, -1, dest)
		   else diff = indir_ - _indir * 010
			dst := g_pp_set(me, ddisp, dest) * 010 + diff
			if src >= _datad_N1  cand  src <= _addrd_R3
			   then g_update_state(regs, src, dest)
			   else g_update_state(regs, -1, dest)
			   end
		   end
		ddisp := 0
	   tag disp (rd: regdisp):
		ddisp := rd.disp
		if ddisp = 0
		   then dst := rd.reg * 010 + indir_
		   else dst := rd.reg * 010 + idisp_
		   end
	   tag index (rd: regdisp):
		ddisp := rd.disp
		dst := rd.reg * 010 + index_
	   others:
	   end
	if src = _imuse
	   then if areg
		   then ainst(me, LEA, dst, _long)
		elseif dst = pdecr_SP_
		   then xinst(me, PEA, _long)
		elseif dreg
		   then minst(me, MOVE, dst * 010, _immed)
		else minst(me, MOVE, dst, _immed) end
		src := _long
	elseif src = _bigint
	   then if areg
		   then ainst(me, MOVEA, dst, _immed)
		elseif dreg
		   then minst(me, MOVE, dst * 010, _immed)
		else minst(me, MOVE, dst, _immed) end
	elseif ~areg
	   then if src = _immed
		   then if dreg
			   then if sdisp >= -0200  cand  sdisp <= 0177
				   then ainst(me, MOVEQ, dst, sdisp // 0400)
					return
				elseif sdisp >= 0200  cand  sdisp <= 0207
				   then ainst(me, MOVEQ, dst, 0177)
					ainst(me, ADDQW, (sdisp - 0177) // 010, dst)
					return
				elseif sdisp >= 0370  cand  sdisp <= 0377
				   then ainst(me, MOVEQ, dst, 0)
					ainst(me, SUBQB, (0400 - sdisp) // 010, dst)
					return
				elseif sdisp >= 0177770  cand  sdisp <= 0177777
				   then ainst(me, MOVEQ, dst, 0)
					ainst(me, SUBQW, (0200000 - sdisp) // 010, dst)
					return
				elseif sdisp >= -0210  cand  sdisp <= -0201
				   then ainst(me, MOVEQ, dst, 0200)
					ainst(me, SUBQW, (-0200 - sdisp) // 010, dst)
					return
				end
			elseif dst = pdecr_SP_  cand
			       sdisp >= -0100000  cand  sdisp <= 077777
			   then xinst(me, PEA, _short)
				immed(me, sdisp)
				return
			elseif sdisp = 1
			   then src := _datad_N0
			        sdisp := 0
			elseif sdisp >= -0200  cand  sdisp <= 0177
			   then ainst(me, MOVEQ, _N7, sdisp // 0400)
				src := _datad_N7
				sdisp := 0
			end
		   end
		if dreg
		   then minst(me, MOVE, dst * 010, src)
		   else minst(me, MOVE, dst, src)
		   end
	elseif src = _immed  cand  sdisp >= -0100000  cand  sdisp <= 077777
	   then ainst(me, MOVEAW, dst, src)
		immed(me, sdisp)
		return
	else ainst(me, MOVEA, dst, src) end
	if sdisp ~= 0
	   then if src = _long
		   then udesc(me, sdisp)
		elseif src = _immed
		   then immed(me, sdisp / 0200000)
			immed(me, sdisp)
		elseif src = _bigint
		   then immed(me, sdisp / 0100000)
			immed(me, (sdisp // 0100000) * 2 + 1)
		else immed(me, sdisp) end
	   end
	if ddisp ~= 0
	   then if dst = long_
		   then udesc(me, ddisp)
		   else immed(me, ddisp)
		   end
	   end
	end g_move_src

is_const_expr = proc (x: expr) returns (bool)
	tagcase x.abs
	   tag null_, bool_, int_, real_, char_, str, apply, op:
		return(true)
	   tag idn (i: idn):
		tagcase i.val
		   tag rparm, cparm:
			return(true)
		   others:
		   end
	   tag invoke (inv: invoke):
		if exprlist$size(inv.args) = 1
		   then tagcase inv.apply.abs
			   tag op (cop: clusterop):
				tagcase cop.type_.abs
				   tag select (selt: seltype):
					return(selt.gen.unique = "oneof"  cand
					       str$indexs("make_", cop.name) = 1  cand
					       is_const_expr(exprlist$bottom(inv.args)))
				   others:
				   end
			   others:
			   end
		   end
	   tag a_cons (cons: arraycons):
		tagcase cons.type_.abs
		   tag cluster_ (ta: clutype):
			if ta.gen.unique ~= "sequence"
			   then return(false) end
		   others:
			return(false)
		   end
		for elt: expr in exprlist$elements(cons.elts) do
			if ~is_const_expr(elt)
			   then return(false) end
			end
		return(true)
	   tag s_cons (cons: selectcons):
		tagcase cons.type_.abs
		   tag select (ta: seltype):
			if ta.gen.unique ~= "struct"
			   then return(false) end
		   others:
			return(false)
		   end
		for f: field in fieldlist$elements(cons.fields) do
			if ~is_const_expr(f.val)
			   then return(false) end
			end
		return(true)
	   others:
	   end
	return(false)
	end is_const_expr

g_const_expr = proc (e: g_env, x: expr, dest: locate)
	src, val: int := g_const_src(x)
	if src = _immed
	   then if val = 0
		   then g_clr_dest(e, dest)
		elseif val = 1
		   then g_move_src(e, dest, _datad_N0, 0)
		else g_move_src(e, dest, src, val) end
	elseif src ~= _imuse
	   then g_move_src(e, dest, src, val)
	else te: g_tenv := e.tenv
	     mval: mref, pflag: int := g_tenv$store_const(te, x)
	     if pflag ~= _plain
		then disp: int := g_tenv$add_puse(te, _use_const, mval)
		     g_pp_set(e.menv, -1, locate$make_a(nil))
		     if disp = 0
			then g_move_src(e, dest, _indir_PP, 0)
			else g_move_src(e, dest, _idisp_PP, disp * 4)
			end
		else disp: int := g_tenv$add_use(te, _use_const, mval)
		     g_move_src(e, dest, _imuse, disp)
		end
	end
	end g_const_expr

g_const_src = proc (x: expr) returns (int, int)
	tagcase x.abs
	   tag null_:
		return(_immed, 0)
	   tag bool_ (b: bool):
		if b
		   then return(_immed, 0377)
		   else return(_immed, 0)
		   end
	   tag int_ (i: int):
		return(_immed, 2 * i + 1)
		   except when overflow: return(_bigint, i) end
           tag real_ (r: real):
	        i: int := _cvt[real, int](r)
	        return (_immed, 2 * i + 1)
		   except when overflow: return (_bigint, i) end
	   tag char_ (c: char):
		return(_immed, char$c2i(c))
	   tag invoke (inv: invoke):
		tagcase inv.apply.abs
		   tag op (cop: clusterop):
			tagcase cop.type_.abs
			   tag select (selt: seltype):
				if selt.gen.unique = "oneof"  cand
				   str$indexs("make_", cop.name) = 1
				   then src, val: int := g_const_src(exprlist$bottom(inv.args))
					if src = _immed  cand
					   val > 0  cand  val < 2**24
					   then src := g_sel(str$rest(cop.name,
								      6),
							     selt.parms)
						if src < 0100
						   then return(_immed,
							       src * 2**24 + val)
						   end
					   end
				   end
			   others:
			   end
		   others:
		   end
	   others:
	   end
	return(_imuse, 0)
	end g_const_src

g_clr_dest = proc (e: g_env, dest: locate)
	me: g_menv := e.menv
	regs: reglist := me.state
	tagcase dest
	   tag var (num: int):
		xinst(me, CLR, _idisp_EP)
		immed(me, num)
		g_update_state(regs, -1, dest)
	   tag rown (num: mref):
		xinst(me, CLR, _long)
		udesc(me, g_tenv$add_use(e.tenv, _use_rown, num))
		g_update_state(regs, -1, dest)
	   tag cown (num: mref):
		xinst(me, CLR, _long)
		udesc(me, g_tenv$add_use(e.tenv, _use_cown, num))
		g_update_state(regs, -1, dest)
	   tag prown (num: mref):
		xinst(me, CLR,
		      g_pp_set(me,
			       g_tenv$add_puse(e.tenv, _use_rown, num),
			       dest))
		g_update_state(regs, -1, dest)
	   tag pcown (num: mref):
		xinst(me, CLR,
		      g_pp_set(me,
			       g_tenv$add_puse(e.tenv, _use_cown, num),
			       dest))
		g_update_state(regs, -1, dest)
	   tag areg (num: int):
		ainst(me, SUBA, num, _addrd + num)
		regs[_addrd + num] := locate$make_a(nil)
	   tag dreg (num: int):
		ainst(me, MOVEQ, num, 0)
		regs[num] := locate$make_a(nil)
	   tag tos:
		xinst(me, CLR, _pdecr_SP)
	   tag disp (rd: regdisp):
		xinst(me, CLR, _idisp + rd.reg) % ? rd.reg was reg
		immed(me, rd.disp)
	   tag index (rd: regdisp):
		xinst(me, CLR, _index + rd.reg) % ? rd.reg was reg
		immed(me, rd.disp)
	   others:
	   end
	end g_clr_dest

g_invoke1 = proc (e: g_env, inv: invoke) returns (calloc)
	nargs: int := exprlist$size(inv.args)
	loc: calloc
	tagcase inv.apply.abs
	   tag apply, op:
		te: g_tenv := e.tenv
		val: mref, pflag: int :=
			g_tenv$store_rconst(te, inv.apply, nargs)
		if pflag ~= _plain
		   then loc := calloc$make_parm(
					g_tenv$add_puse(te, _use_const, val))
		   else loc := calloc$make_use(
					g_tenv$add_use(te, _use_const, val))
		   end
	   tag force_ (xa: typespec):
		te: g_tenv := e.tenv
		xt: expr := expr$create(exprabs$make_type_(xa), te.type_type)
		abs: exprabs := exprabs$make_apply(
					clutype${gen:   e.force_,
						 parms: exprlist$[xt]})
		xt := expr$create(abs, te.unknown_type)
		val: mref, pflag: int := g_tenv$store_rconst(te, xt, 1)
		if pflag ~= _plain
		   then loc := calloc$make_parm(
					g_tenv$add_puse(te, _use_const, val))
		   else loc := calloc$make_use(
					g_tenv$add_use(te, _use_const, val))
		   end
	   tag idn (i: idn):
		tagcase i.val
		   tag var (num: int):
			loc := calloc$make_var(num)
		   others:
			g_menv$begin_vars(e.menv)
			disp: int := g_menv$alloc_var(e.menv)
			g_expr(e, inv.apply, locate$make_var(disp))
			loc := calloc$make_temp(disp)
		   end
	   others:
		g_menv$begin_vars(e.menv)
		disp: int := g_menv$alloc_var(e.menv)
		g_expr(e, inv.apply, locate$make_var(disp))
		loc := calloc$make_temp(disp)
	   end
	args: exprlist := inv.args
	z: int := exprlist$size(args)
	for i: int in int$from_to(1, z - 1) do
		g_expr(e, args[i], locate$make_tos(nil))
		end
	if z > 0
	   then g_expr(e, exprlist$top(args), locate$make_areg(_RR)) end
	return(loc)
	end g_invoke1

g_invoke2 = proc (e: g_env, val: calloc)
	me: g_menv := e.menv
	tagcase val
	   tag use (num: int):
		xinst(me, JSR, _long)
		udesc(me, num)
	   tag var (num: int):
		ainst(me, MOVEA, _R4, _idisp_EP)
		immed(me, num)
		xinst(me, JSR, _indir_R4)
	   tag temp (num: int):
		ainst(me, MOVEA, _R4, _idisp_EP)
		immed(me, num)
		xinst(me, JSR, _indir_R4)
		g_menv$end_vars(me)
	   tag parm (num: int):
		xinst(me, JSR, g_pp_set(me, num, locate$make_a(nil)))
	   end
	g_reset_state(me.state)
	end g_invoke2

g_anyize = proc (e: g_env, x: expr)
	g_expr(e, x, locate$make_areg(_RR))
	xt: expr := expr$create(exprabs$make_type_(x.typespec), e.tenv.type_type)
	abs: exprabs := exprabs$make_apply(
				clutype${gen:   e.anyize_,
					 parms: exprlist$[xt]})
	g_call(e, abs, 1)
	end g_anyize

g_condop = proc (e: g_env, x: condop, is_cor: bool)
	me: g_menv := e.menv
	g_expr(e, x.left, locate$make_areg(_RR))
	minst(me, MOVE, datad_N7_, _addrd_RR)
	aregs: reglist := me.state
	zregs: reglist := g_menv$begin_state(me, false)
	xloc: int
	if is_cor
	   then xloc := binst(me, BNE)
	   else xloc := binst(me, BEQ)
	   end
	g_expr(e, x.right, locate$make_areg(_RR))
	g_menv$goto(me, xloc)
	g_merge_state(aregs, zregs, true)
	g_menv$end_state(me)
	end g_condop

g_arraycons = proc (e: g_env, cons: arraycons)
	te: g_tenv := e.tenv
	me: g_menv := e.menv
	is_array: bool := false
	tagcase cons.low
	   tag one (x: expr):
		g_expr(e, x, locate$make_tos(nil))
		is_array := true
	   others:
		tagcase cons.type_.abs
		   tag cluster_ (ta: clutype):
			if ta.gen.unique ~= "sequence"
			   then if exprlist$size(cons.elts) = 0
				   then cop: clusterop :=
						clusterop${type_: cons.type_,
							   name:  "new",
							   parms: exprlist$new()}
					g_call(e, exprabs$make_op(cop), 0)
					return
				   end
				is_array := true
				ainst(me, MOVEQ, _N7, 3)
				minst(me, MOVE, pdecr_SP_, _datad_N7)
			   end
		   others:
		   end
	   end
	if is_array
	   then for x: expr in exprlist$elements(cons.elts) do
			if ~is_const_expr(x)
			   then exit cons end
			end
		val: mref, pflag: int := g_seq_const(te, cons.elts)
		val := g_tenv$store_cell(te, _const_seq, val)
		if pflag ~= _plain
		   then g_pp_set(me, -1, locate$make_a(nil))
			disp: int := g_tenv$add_puse(te, _use_const, val)
			if disp = 0
			   then ainst(me, MOVEA, _RR, _indir_PP)
			   else ainst(me, MOVEA, _RR, _idisp_PP)
				immed(me, 4 * disp)
			   end
		   else disp: int := g_tenv$add_use(te, _use_const, val)
			ainst(me, LEA, _RR, _long)
			udesc(me, disp)
		   end
		g_call(e,
		       exprabs$make_op(clusterop${type_: cons.type_,
						  name:  "cons2",
						  parms: exprlist$new()}),
		       2)
		return
	   end except when cons: end
	for x: expr in exprlist$elements(cons.elts) do
		g_expr(e, x, locate$make_tos(nil))
		end
	sz: int := exprlist$size(cons.elts)
	if sz = 0
	   then ainst(me, MOVEA, _RR, _datad_N0)
	   else ainst(me, MOVEAW, _RR, _immed)
		immed(me, 2 * sz + 1)
	   end
	g_call(e, e.vcons, 1)
	if sz <= 3
	   then for i: int in int$from_to_by(sz, 1, -1) do
			minst(me, MOVE, idisp_RR_, _pincr_SP)
			immed(me, 4 * i)
			end
	elseif sz < 0100
	   then ainst(me, MOVEQ, _N1, 4 * sz)
		minst(me, MOVE, index_RR_, _pincr_SP)
		immed(me, 0014000)
		ainst(me, SUBQB, 4, _datad_N1)
		xinst(me, BNE, 0370)
	else minst(me, MOVEW, datad_N1_, _immed)
	     immed(me, 4 * sz)
	     minst(me, MOVE, index_RR_, _pincr_SP)
	     immed(me, 014000)
	     ainst(me, SUBQW, 4, _datad_N1)
	     xinst(me, BNE, 0370)
	end
	if is_array
	   then cop: clusterop := clusterop${type_: cons.type_,
					     name:  "%_cons2",
					     parms: exprlist$new()}
		g_call(e, exprabs$make_op(cop), 2)
	   end
	end g_arraycons

g_selectcons = proc (e: g_env, cons: selectcons)
	fields: fieldlist := cons.fields
	isconst: bool := true
	sz: int := 0
	for fld: field in fieldlist$elements(fields) do
		sz := sz + namelist$size(fld.sels)
		tagcase fld.val.abs
		   tag null_, bool_, int_, real_, char_, str, apply, op:
			continue
		   tag idn (i: idn):
			tagcase i.val
			   tag var:
				isconst := false
				continue
			   tag rparm, cparm:
				continue
			   others:
			   end
		   others:
			if is_const_expr(fld.val)
			   then continue end
		   end
		isconst := false
		for sel: name in namelist$elements(fld.sels) do
			g_expr(e, fld.val, locate$make_tos(nil))
			end
		end
	me: g_menv := e.menv
	if isconst
	   then te: g_tenv := e.tenv
		val: mref, pflag: int := g_struct_const(te,
				typeabs$value_select(cons.type_.abs).parms,
				fields)
		val := g_tenv$store_cell(te, _const_struct, val)
		if pflag ~= _plain
		   then g_pp_set(me, -1, locate$make_a(nil))
			disp: int := g_tenv$add_puse(te, _use_const, val)
			if disp = 0
			   then ainst(me, MOVEA, _RR, _indir_PP)
			   else ainst(me, MOVEA, _RR, _idisp_PP)
				immed(me, 4 * disp)
			   end
		   else disp: int := g_tenv$add_use(te, _use_const, val)
			ainst(me, LEA, _RR, _long)
			udesc(me, disp)
		   end
		g_call(e,
		       exprabs$make_op(clusterop${type_: cons.type_,
						  name:  "copy1",
						  parms: exprlist$new()}),
		       1)
		return
	   end
	ainst(me, MOVEAW, _RR, _immed)
	immed(me, 2 * sz + 1)
	g_call(e, e.vcons, 1)
	spec: fieldspeclist
	tagcase cons.type_.abs
	   tag select (ta: seltype):
		spec := ta.parms
	   others:
		spec := fieldspeclist$new()
	   end
	for i: int in int$from_to_by(fieldlist$size(fields), 1, -1) do
		fld: field := fields[i]
		sels: namelist := fld.sels
		tagcase fld.val.abs
		   tag null_:
			continue
		   tag bool_ (b: bool):
			if ~b
			   then continue end
		   tag char_ (c: char):
			if c = '\000'
			   then continue end
		   tag int_, real_, str, apply, op:
		   tag idn (id: idn):
			tagcase id.val
			   tag var (num: int):
				for sel: name in namelist$elements(sels) do
					minst(me, MOVE, idisp_RR_, _idisp_EP)
					immed(me, num)
					immed(me, 4 * g_sel(sel, spec))
					end
				continue
			   tag rparm, cparm:
			   others:
				for j: int in int$from_to_by(namelist$size(sels), 1, -1) do
					minst(me, MOVE, idisp_RR_, _pincr_SP)
					immed(me, 4 * g_sel(sels[j], spec))
					end
				continue
			   end
		   others:
			if ~is_const_expr(fld.val)
			   then for j: int in int$from_to_by(namelist$size(sels), 1, -1) do
					minst(me, MOVE, idisp_RR_, _pincr_SP)
					immed(me, 4 * g_sel(sels[j], spec))
					end
				continue
			   end
		   end
		for sel: name in namelist$elements(sels) do
			g_const_expr(e, fld.val,
				     locate$make_disp(
					 regdisp${reg: _RR,
						  disp: 4 * g_sel(sel, spec)}))
			end
		end
	end g_selectcons

g_routine = proc (e: g_env, x: expr, dest: locate)
	te: g_tenv := e.tenv
	val: mref, pflag: int := g_tenv$store_rconst(te, x, -1)
	if pflag ~= _plain
	   then disp: int := g_tenv$add_puse(te, _use_const, val)
		g_pp_set(e.menv, -1, locate$make_a(nil))
		if disp = 0
		   then g_move_src(e, dest, _indir_PP, 0)
		   else g_move_src(e, dest, _idisp_PP, 4 * disp)
		   end
	   else disp: int := g_tenv$add_use(te, _use_const, val)
		g_move_src(e, dest, _imuse, disp)
	   end
	end g_routine

g_find_idn = proc (regs: reglist, val: locate) returns (bool, int)
	for reg: int in int$from_to_by(_addrd_R3, _datad_N1, -1) do
		if regs[reg] = val
		   then return(true, reg) end
		end
	return(false, g_choose_areg(regs))
	end g_find_idn

g_choose_areg = proc (regs: reglist) returns (int)
	if locate$is_a(regs[_addrd_RR])
	   then return(_addrd_RR)
	elseif locate$is_a(regs[_addrd_R1])
	   then return(_addrd_R1)
	elseif locate$is_a(regs[_addrd_R2])
	   then return(_addrd_R2)
	elseif locate$is_a(regs[_addrd_R3])
	   then return(_addrd_R3)
	else return(_addrd_RR) end
	end g_choose_areg

g_update_state = proc (regs: reglist, reg: int, val: locate)
	for i: int in int$from_to_by(_addrd_R3, _datad_N1, -1) do
		if regs[i] = val
		   then regs[i] := locate$make_a(nil) end
		end
	if reg > 0 cand reg ~= _datad_N7
	   then regs[reg] := val end
	end g_update_state

g_reset_state = proc (regs: reglist)
	for reg: int in int$from_to_by(_addrd_PP, _datad_N1, -1) do
		regs[reg] := locate$make_a(nil)
		end
	end g_reset_state

g_merge_state = proc (oregs, nregs: reglist, cont: bool) returns (bool)
	if ~cont
	   then for reg: int in int$from_to_by(_addrd_PP, _datad_N1, -1) do
			oregs[reg] := nregs[reg]
			end
	   else for reg: int in int$from_to_by(_addrd_PP, _datad_N1, -1) do
			if oregs[reg] ~= nregs[reg]
			   then oregs[reg] := locate$make_a(nil) end
			end
	   end
	return(true)
	end g_merge_state
